
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000015c2  00001656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  00001666  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b2  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
      8a:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_init>:
/*
 * Function Name: BUZZER_init
 * Description: Setup Buzzer_pin as output pin  and turn off the buzzer
 */
void BUZZER_init(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* Make BuzzerPin as output pin*/
	GPIO_setupPinDirection(BUZZER_PORT , BUZZER_PIN , OUTPUT_PIN);
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	63 e0       	ldi	r22, 0x03	; 3
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 4d 04 	call	0x89a	; 0x89a <GPIO_setupPinDirection>
	/* Buzzer of at first*/
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	63 e0       	ldi	r22, 0x03	; 3
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <BUZZER_On>:
/*
 * Function Name: BUZZER_On()
 * Description :  enable the Buzzer through the GPIO
 */
void BUZZER_On(void)
{
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_HIGH);
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	63 e0       	ldi	r22, 0x03	; 3
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
}
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <BUZZER_Off>:
/*
 * Function Name: BUZZER_Off()
 * Description:  disable the Buzzer through the GPIO.
 */
void BUZZER_Off(void)
{
      cc:	df 93       	push	r29
      ce:	cf 93       	push	r28
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT , BUZZER_PIN , LOGIC_LOW);
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	63 e0       	ldi	r22, 0x03	; 3
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <main>:
/*
 * Function Name : main()
 * Description   :implement Control ECU Code
 */
int main(void)
{
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	6d 97       	sbiw	r28, 0x1d	; 29
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
	/*Enable i-bit to use interrupt in TIMER1*/
	SREG |=(1<<7);
      f8:	af e5       	ldi	r26, 0x5F	; 95
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	ef e5       	ldi	r30, 0x5F	; 95
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 68       	ori	r24, 0x80	; 128
     104:	8c 93       	st	X, r24
	 * 				1.Even parity
	 * 				2.one stop Bit
	 * 				3. 8 Bits for data
	 * 				4.Baud Rate = 9600
	 *******************************************************/
	UART_ConfigType configurations = { Even, OneBit , Bit_8 , 9600 };
     106:	ce 01       	movw	r24, r28
     108:	40 96       	adiw	r24, 0x10	; 16
     10a:	9a 8f       	std	Y+26, r25	; 0x1a
     10c:	89 8f       	std	Y+25, r24	; 0x19
     10e:	e0 e6       	ldi	r30, 0x60	; 96
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	fc 8f       	std	Y+28, r31	; 0x1c
     114:	eb 8f       	std	Y+27, r30	; 0x1b
     116:	f7 e0       	ldi	r31, 0x07	; 7
     118:	fd 8f       	std	Y+29, r31	; 0x1d
     11a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     11c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     11e:	00 80       	ld	r0, Z
     120:	8b 8d       	ldd	r24, Y+27	; 0x1b
     122:	9c 8d       	ldd	r25, Y+28	; 0x1c
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	9c 8f       	std	Y+28, r25	; 0x1c
     128:	8b 8f       	std	Y+27, r24	; 0x1b
     12a:	e9 8d       	ldd	r30, Y+25	; 0x19
     12c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     12e:	00 82       	st	Z, r0
     130:	89 8d       	ldd	r24, Y+25	; 0x19
     132:	9a 8d       	ldd	r25, Y+26	; 0x1a
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	9a 8f       	std	Y+26, r25	; 0x1a
     138:	89 8f       	std	Y+25, r24	; 0x19
     13a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     13c:	91 50       	subi	r25, 0x01	; 1
     13e:	9d 8f       	std	Y+29, r25	; 0x1d
     140:	ed 8d       	ldd	r30, Y+29	; 0x1d
     142:	ee 23       	and	r30, r30
     144:	51 f7       	brne	.-44     	; 0x11a <main+0x36>
	UART_init( &configurations);
     146:	ce 01       	movw	r24, r28
     148:	40 96       	adiw	r24, 0x10	; 16
     14a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <UART_init>
	/*******************************************************
	 * 				I2C Configuration
	 * 				1.use 400k bit rate -- TWB=2
	 * 				2.Choice address number (4)
	 *******************************************************/
	TWI_ConfigType twi_configurations={0x02,0x04};
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	8f 8b       	std	Y+23, r24	; 0x17
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	88 8f       	std	Y+24, r24	; 0x18
	TWI_init(&twi_configurations);
     156:	ce 01       	movw	r24, r28
     158:	47 96       	adiw	r24, 0x17	; 23
     15a:	0e 94 87 08 	call	0x110e	; 0x110e <TWI_init>
	/* DcMotor initialization*/
	DcMotor_init();
     15e:	0e 94 2e 03 	call	0x65c	; 0x65c <DcMotor_init>
	/* Buzzer initialization*/
	BUZZER_init();
     162:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_init>
	/* Send to MC1 that MC2 become Ready  to recieve orders*/
	while(UART_recieveByte() != MC2_READY);
     166:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     16a:	8f 3f       	cpi	r24, 0xFF	; 255
     16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x82>
	while(1)
	{
		/*Check if Pass and same pass are taken from HMI_ECU*/
		checkOnPass(newpass ,samePass ,userPass);
     16e:	ce 01       	movw	r24, r28
     170:	06 96       	adiw	r24, 0x06	; 6
     172:	9e 01       	movw	r18, r28
     174:	25 5f       	subi	r18, 0xF5	; 245
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	b9 01       	movw	r22, r18
     17a:	9e 01       	movw	r18, r28
     17c:	2f 5f       	subi	r18, 0xFF	; 255
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	a9 01       	movw	r20, r18
     182:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <checkOnPass>
		/*Start runing the system*/
		systemRun(userPass,newpass,samePass);
     186:	9e 01       	movw	r18, r28
     188:	2a 5f       	subi	r18, 0xFA	; 250
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
     18c:	ae 01       	movw	r20, r28
     18e:	45 5f       	subi	r20, 0xF5	; 245
     190:	5f 4f       	sbci	r21, 0xFF	; 255
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	b9 01       	movw	r22, r18
     198:	0e 94 c5 01 	call	0x38a	; 0x38a <systemRun>
     19c:	e8 cf       	rjmp	.-48     	; 0x16e <main+0x8a>

0000019e <recievePass>:
/*
 * Function Name : recievePass()
 * Description   : recieve password from HMI_ECU and save it in array
 */
void recievePass(uint8 arr[])
{
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <recievePass+0xa>
     1a8:	0f 92       	push	r0
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	9b 83       	std	Y+3, r25	; 0x03
     1b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0 ; i< PASS_SIZE ;i++)
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <recievePass+0x36>
	{
		arr[i]=UART_recieveByte();
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	28 2f       	mov	r18, r24
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	9b 81       	ldd	r25, Y+3	; 0x03
     1c0:	8c 01       	movw	r16, r24
     1c2:	02 0f       	add	r16, r18
     1c4:	13 1f       	adc	r17, r19
     1c6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     1ca:	f8 01       	movw	r30, r16
     1cc:	80 83       	st	Z, r24
 * Description   : recieve password from HMI_ECU and save it in array
 */
void recievePass(uint8 arr[])
{
	uint8 i;
	for(i=0 ; i< PASS_SIZE ;i++)
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
     1d2:	89 83       	std	Y+1, r24	; 0x01
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	85 30       	cpi	r24, 0x05	; 5
     1d8:	70 f3       	brcs	.-36     	; 0x1b6 <recievePass+0x18>
	{
		arr[i]=UART_recieveByte();
	}
	/* recieve pass untill enter*/
	while(UART_recieveByte() != '=');
     1da:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     1de:	8d 33       	cpi	r24, 0x3D	; 61
     1e0:	e1 f7       	brne	.-8      	; 0x1da <recievePass+0x3c>
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <checkOnPass>:
 * Function Name:checkOnNewPass()
 * Description:
 * 	Recieve and Check if The two pass are the same or not , if are matched write it in EEPROM
 */
void checkOnPass(uint8 arr1 [], uint8 arr2[] ,uint8 arr3[] )
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	29 97       	sbiw	r28, 0x09	; 9
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	9b 83       	std	Y+3, r25	; 0x03
     208:	8a 83       	std	Y+2, r24	; 0x02
     20a:	7d 83       	std	Y+5, r23	; 0x05
     20c:	6c 83       	std	Y+4, r22	; 0x04
     20e:	5f 83       	std	Y+7, r21	; 0x07
     210:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
     212:	8a 81       	ldd	r24, Y+2	; 0x02
     214:	9b 81       	ldd	r25, Y+3	; 0x03
     216:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
	recievePass(arr2);		/* recieve confim pass*/
     21a:	8c 81       	ldd	r24, Y+4	; 0x04
     21c:	9d 81       	ldd	r25, Y+5	; 0x05
     21e:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
     222:	19 82       	std	Y+1, r1	; 0x01
     224:	1e c0       	rjmp	.+60     	; 0x262 <checkOnPass+0x70>
	{
		if(arr1[i] == arr2[i])
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	9b 81       	ldd	r25, Y+3	; 0x03
     230:	fc 01       	movw	r30, r24
     232:	e2 0f       	add	r30, r18
     234:	f3 1f       	adc	r31, r19
     236:	40 81       	ld	r20, Z
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	28 2f       	mov	r18, r24
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	9d 81       	ldd	r25, Y+5	; 0x05
     242:	fc 01       	movw	r30, r24
     244:	e2 0f       	add	r30, r18
     246:	f3 1f       	adc	r31, r19
     248:	80 81       	ld	r24, Z
     24a:	48 17       	cp	r20, r24
     24c:	39 f4       	brne	.+14     	; 0x25c <checkOnPass+0x6a>
		{
			isPassTrue=TRUE;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 70 00 	sts	0x0070, r24
{
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
	recievePass(arr2);		/* recieve confim pass*/
	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	89 83       	std	Y+1, r24	; 0x01
     25a:	03 c0       	rjmp	.+6      	; 0x262 <checkOnPass+0x70>
		{
			isPassTrue=TRUE;
		}
		else
		{
			isPassTrue=FALSE;
     25c:	10 92 70 00 	sts	0x0070, r1
     260:	03 c0       	rjmp	.+6      	; 0x268 <checkOnPass+0x76>
{
	uint8 i;
	recievePass(arr1);		/* recieve pass*/
	recievePass(arr2);		/* recieve confim pass*/
	/* Compare if two pass are matched or not*/
	for(i=0;i<PASS_SIZE;i++)
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	85 30       	cpi	r24, 0x05	; 5
     266:	f8 f2       	brcs	.-66     	; 0x226 <checkOnPass+0x34>
			isPassTrue=FALSE;
			break;
		}
	}
	/* Agreement between two ECUs*/
	UART_sendByte(MC2_WILL_SEND_CHECK);
     268:	80 e2       	ldi	r24, 0x20	; 32
     26a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
	/* Send The result for HMI_ECU*/
	switch(isPassTrue)
     26e:	80 91 70 00 	lds	r24, 0x0070
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	39 87       	std	Y+9, r19	; 0x09
     278:	28 87       	std	Y+8, r18	; 0x08
     27a:	88 85       	ldd	r24, Y+8	; 0x08
     27c:	99 85       	ldd	r25, Y+9	; 0x09
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	01 f1       	breq	.+64     	; 0x2c2 <checkOnPass+0xd0>
     282:	28 85       	ldd	r18, Y+8	; 0x08
     284:	39 85       	ldd	r19, Y+9	; 0x09
     286:	21 30       	cpi	r18, 0x01	; 1
     288:	31 05       	cpc	r19, r1
     28a:	39 f5       	brne	.+78     	; 0x2da <checkOnPass+0xe8>
	{
	case TRUE:
		UART_sendByte(PASS_IS_TRUE);	/* Send Result*/
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
		isPassTrue=FALSE;				/* Clear Flag*/
     292:	10 92 70 00 	sts	0x0070, r1
		writeEEPROM(arr1);				/* Write pass in EEPROM */
     296:	8a 81       	ldd	r24, Y+2	; 0x02
     298:	9b 81       	ldd	r25, Y+3	; 0x03
     29a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <writeEEPROM>
		systemOperation();				/*Recieve user option */
     29e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <systemOperation>
		/* Agreement between two ECUs*/
		while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
     2a2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <checkOnPass+0xb0>
		/* Recieve User Pass*/
		recievePass(arr3);
     2aa:	8e 81       	ldd	r24, Y+6	; 0x06
     2ac:	9f 81       	ldd	r25, Y+7	; 0x07
     2ae:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
		/* Check if equal the pass which write in EEPROM*/
		checkOnEEPROMpass(arr3 ,arr1);
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	9f 81       	ldd	r25, Y+7	; 0x07
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	b9 01       	movw	r22, r18
     2bc:	0e 94 76 01 	call	0x2ec	; 0x2ec <checkOnEEPROMpass>
     2c0:	0c c0       	rjmp	.+24     	; 0x2da <checkOnPass+0xe8>
		break;
		/* Case False*/
	case FALSE:
		UART_sendByte(PASS_IS_FALSE);	/*Send Result to HMI_ECU*/
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
		checkOnPass(arr1,arr2,arr3);	/* Re-call the function to do the same step*/
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	2c 81       	ldd	r18, Y+4	; 0x04
     2ce:	3d 81       	ldd	r19, Y+5	; 0x05
     2d0:	4e 81       	ldd	r20, Y+6	; 0x06
     2d2:	5f 81       	ldd	r21, Y+7	; 0x07
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <checkOnPass>
		break;
	}
}
     2da:	29 96       	adiw	r28, 0x09	; 9
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <checkOnEEPROMpass>:
/*
 * Function Name : checkOnEEPROMpass()
 * Description   : check on password in EEPROM
 */
void checkOnEEPROMpass(uint8 array1[] , uint8 array2[])
{
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <checkOnEEPROMpass+0x6>
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <checkOnEEPROMpass+0x8>
     2f4:	0f 92       	push	r0
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	9b 83       	std	Y+3, r25	; 0x03
     2fc:	8a 83       	std	Y+2, r24	; 0x02
     2fe:	7d 83       	std	Y+5, r23	; 0x05
     300:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* First read pass which stored in EEPROM*/
	for(i=0 ; i<PASS_SIZE ;i++)
     302:	19 82       	std	Y+1, r1	; 0x01
     304:	14 c0       	rjmp	.+40     	; 0x32e <checkOnEEPROMpass+0x42>
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	8e 5c       	subi	r24, 0xCE	; 206
     30e:	93 4f       	sbci	r25, 0xF3	; 243
     310:	ac 01       	movw	r20, r24
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	28 2f       	mov	r18, r24
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	28 0f       	add	r18, r24
     31e:	39 1f       	adc	r19, r25
     320:	ca 01       	movw	r24, r20
     322:	b9 01       	movw	r22, r18
     324:	0e 94 ed 03 	call	0x7da	; 0x7da <EEPROM_readByte>
 */
void checkOnEEPROMpass(uint8 array1[] , uint8 array2[])
{
	uint8 i;
	/* First read pass which stored in EEPROM*/
	for(i=0 ; i<PASS_SIZE ;i++)
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	85 30       	cpi	r24, 0x05	; 5
     332:	48 f3       	brcs	.-46     	; 0x306 <checkOnEEPROMpass+0x1a>
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
     334:	19 82       	std	Y+1, r1	; 0x01
     336:	1e c0       	rjmp	.+60     	; 0x374 <checkOnEEPROMpass+0x88>
	{
		if(array1[i]== array2[i])
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	9b 81       	ldd	r25, Y+3	; 0x03
     342:	fc 01       	movw	r30, r24
     344:	e2 0f       	add	r30, r18
     346:	f3 1f       	adc	r31, r19
     348:	40 81       	ld	r20, Z
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	8c 81       	ldd	r24, Y+4	; 0x04
     352:	9d 81       	ldd	r25, Y+5	; 0x05
     354:	fc 01       	movw	r30, r24
     356:	e2 0f       	add	r30, r18
     358:	f3 1f       	adc	r31, r19
     35a:	80 81       	ld	r24, Z
     35c:	48 17       	cp	r20, r24
     35e:	39 f4       	brne	.+14     	; 0x36e <checkOnEEPROMpass+0x82>
		{
			isUserPassTrue=TRUE;		/* make flag true*/
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 71 00 	sts	0x0071, r24
	for(i=0 ; i<PASS_SIZE ;i++)
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	89 83       	std	Y+1, r24	; 0x01
     36c:	03 c0       	rjmp	.+6      	; 0x374 <checkOnEEPROMpass+0x88>
		{
			isUserPassTrue=TRUE;		/* make flag true*/
		}
		else
		{
			isUserPassTrue=FALSE;		/* Make Flag False*/
     36e:	10 92 71 00 	sts	0x0071, r1
     372:	03 c0       	rjmp	.+6      	; 0x37a <checkOnEEPROMpass+0x8e>
	for(i=0 ; i<PASS_SIZE ;i++)
	{
		EEPROM_readByte((0x0C32)+i,array1+i);
	}
	/* Compare f two pass are the same or not , And Change Flag */
	for(i=0 ;i<PASS_SIZE ;i++)
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	85 30       	cpi	r24, 0x05	; 5
     378:	f8 f2       	brcs	.-66     	; 0x338 <checkOnEEPROMpass+0x4c>
		{
			isUserPassTrue=FALSE;		/* Make Flag False*/
			break;
		}
	}
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <systemRun>:
/*
 * Function Name: systemRun()
 * Description  : Start running of the system
 */
void systemRun(uint8 userpass[] , uint8 newpass[] ,uint8 samepass[])
{
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	2a 97       	sbiw	r28, 0x0a	; 10
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
     3a2:	7c 83       	std	Y+4, r23	; 0x04
     3a4:	6b 83       	std	Y+3, r22	; 0x03
     3a6:	5e 83       	std	Y+6, r21	; 0x06
     3a8:	4d 83       	std	Y+5, r20	; 0x05
	/* To know if flag is true or false*/
	checkOnEEPROMpass(userpass ,newpass);
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	2b 81       	ldd	r18, Y+3	; 0x03
     3b0:	3c 81       	ldd	r19, Y+4	; 0x04
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <checkOnEEPROMpass>
	/* Agreement between two ECUs*/
	while(UART_recieveByte ()!= CHECK_USER_PASS);
     3b8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     3bc:	85 35       	cpi	r24, 0x55	; 85
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <systemRun+0x2e>
	/*Check on Flag of user password*/
	switch(isUserPassTrue)
     3c0:	80 91 71 00 	lds	r24, 0x0071
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	3a 87       	std	Y+10, r19	; 0x0a
     3ca:	29 87       	std	Y+9, r18	; 0x09
     3cc:	89 85       	ldd	r24, Y+9	; 0x09
     3ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <systemRun+0x4c>
     3d4:	45 c0       	rjmp	.+138    	; 0x460 <systemRun+0xd6>
     3d6:	29 85       	ldd	r18, Y+9	; 0x09
     3d8:	3a 85       	ldd	r19, Y+10	; 0x0a
     3da:	21 30       	cpi	r18, 0x01	; 1
     3dc:	31 05       	cpc	r19, r1
     3de:	09 f0       	breq	.+2      	; 0x3e2 <systemRun+0x58>
     3e0:	76 c0       	rjmp	.+236    	; 0x4ce <systemRun+0x144>
	{
	case TRUE:

	{
		UART_sendByte(USER_PASS_IS_TRUE);	/* Send to HMI that the user pass is true*/
     3e2:	87 e1       	ldi	r24, 0x17	; 23
     3e4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
		failedAttemp=0;						/* Make failed Attemps =0*/
     3e8:	10 92 72 00 	sts	0x0072, r1
		/* Check on User choice*/
		switch(SystemOperation)
     3ec:	80 91 76 00 	lds	r24, 0x0076
     3f0:	28 2f       	mov	r18, r24
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	38 87       	std	Y+8, r19	; 0x08
     3f6:	2f 83       	std	Y+7, r18	; 0x07
     3f8:	8f 81       	ldd	r24, Y+7	; 0x07
     3fa:	98 85       	ldd	r25, Y+8	; 0x08
     3fc:	8b 32       	cpi	r24, 0x2B	; 43
     3fe:	91 05       	cpc	r25, r1
     400:	31 f0       	breq	.+12     	; 0x40e <systemRun+0x84>
     402:	2f 81       	ldd	r18, Y+7	; 0x07
     404:	38 85       	ldd	r19, Y+8	; 0x08
     406:	2d 32       	cpi	r18, 0x2D	; 45
     408:	31 05       	cpc	r19, r1
     40a:	b9 f0       	breq	.+46     	; 0x43a <systemRun+0xb0>
     40c:	60 c0       	rjmp	.+192    	; 0x4ce <systemRun+0x144>
		{
		case '+' :
			openDoor();			/* turn on dcmotor , unlocking door*/
     40e:	0e 94 a4 02 	call	0x548	; 0x548 <openDoor>
			/* return to know user option , Re-turn to step take operation from user*/
			systemOperation();
     412:	0e 94 70 02 	call	0x4e0	; 0x4e0 <systemOperation>
			/* Agreement between two ECUs*/
			while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
     416:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     41a:	8e 3e       	cpi	r24, 0xEE	; 238
     41c:	e1 f7       	brne	.-8      	; 0x416 <systemRun+0x8c>
			/* take user pass*/
			recievePass(userpass);
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
			/* start running system again*/
			systemRun(userpass,newpass,samepass);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	2b 81       	ldd	r18, Y+3	; 0x03
     42c:	3c 81       	ldd	r19, Y+4	; 0x04
     42e:	4d 81       	ldd	r20, Y+5	; 0x05
     430:	5e 81       	ldd	r21, Y+6	; 0x06
     432:	b9 01       	movw	r22, r18
     434:	0e 94 c5 01 	call	0x38a	; 0x38a <systemRun>
     438:	4a c0       	rjmp	.+148    	; 0x4ce <systemRun+0x144>
			break;
		case '-' :
			/* recieve change pass , And start Runnig system again*/
			checkOnPass(newpass,samepass,userpass);
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	2d 81       	ldd	r18, Y+5	; 0x05
     440:	3e 81       	ldd	r19, Y+6	; 0x06
     442:	49 81       	ldd	r20, Y+1	; 0x01
     444:	5a 81       	ldd	r21, Y+2	; 0x02
     446:	b9 01       	movw	r22, r18
     448:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <checkOnPass>

			systemRun(userpass,newpass,samepass);
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	2b 81       	ldd	r18, Y+3	; 0x03
     452:	3c 81       	ldd	r19, Y+4	; 0x04
     454:	4d 81       	ldd	r20, Y+5	; 0x05
     456:	5e 81       	ldd	r21, Y+6	; 0x06
     458:	b9 01       	movw	r22, r18
     45a:	0e 94 c5 01 	call	0x38a	; 0x38a <systemRun>
     45e:	37 c0       	rjmp	.+110    	; 0x4ce <systemRun+0x144>
		}
	}
	break;
	/* Case False user pass*/
	case FALSE :
		UART_sendByte(USER_PASS_IS_FALSE);		/* Send Result to HMI_ECU*/
     460:	86 e1       	ldi	r24, 0x16	; 22
     462:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
		/* increment failed attemps*/
		failedAttemp++;
     466:	80 91 72 00 	lds	r24, 0x0072
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	80 93 72 00 	sts	0x0072, r24
		/* Check if failed attemps reach to three attemps continous*/
		switch(failedAttemp)
     470:	80 91 72 00 	lds	r24, 0x0072
     474:	88 2f       	mov	r24, r24
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	83 30       	cpi	r24, 0x03	; 3
     47a:	91 05       	cpc	r25, r1
     47c:	b9 f4       	brne	.+46     	; 0x4ac <systemRun+0x122>
		{
		case 3:
			failedAttemp=0;		/* clear failed attemps*/
     47e:	10 92 72 00 	sts	0x0072, r1
			/* Turn on Buzzer for 60 minute*/
			activeBuzzzer();
     482:	0e 94 c7 02 	call	0x58e	; 0x58e <activeBuzzzer>
			/* Re-turb again to know which new operation that user need*/
			systemOperation();
     486:	0e 94 70 02 	call	0x4e0	; 0x4e0 <systemOperation>
			/* Agreement between two ECUs*/
			while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
     48a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     48e:	8e 3e       	cpi	r24, 0xEE	; 238
     490:	e1 f7       	brne	.-8      	; 0x48a <systemRun+0x100>
			/* take user pass*/
			recievePass(userpass);
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
			/* start running system again*/
			systemRun(userpass,newpass,samepass);
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	2b 81       	ldd	r18, Y+3	; 0x03
     4a0:	3c 81       	ldd	r19, Y+4	; 0x04
     4a2:	4d 81       	ldd	r20, Y+5	; 0x05
     4a4:	5e 81       	ldd	r21, Y+6	; 0x06
     4a6:	b9 01       	movw	r22, r18
     4a8:	0e 94 c5 01 	call	0x38a	; 0x38a <systemRun>
			break;
		}
		/* Agreement between two ECUs*/
		while(UART_recieveByte() != MC2_READY_TO_GET_USER_PASS);
     4ac:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     4b0:	8e 3e       	cpi	r24, 0xEE	; 238
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <systemRun+0x122>
		/* take user pass*/
		recievePass(userpass);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	0e 94 cf 00 	call	0x19e	; 0x19e <recievePass>
		/* start running system again*/
		systemRun(userpass,newpass,samepass);
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	2b 81       	ldd	r18, Y+3	; 0x03
     4c2:	3c 81       	ldd	r19, Y+4	; 0x04
     4c4:	4d 81       	ldd	r20, Y+5	; 0x05
     4c6:	5e 81       	ldd	r21, Y+6	; 0x06
     4c8:	b9 01       	movw	r22, r18
     4ca:	0e 94 c5 01 	call	0x38a	; 0x38a <systemRun>
		break;
	}
}
     4ce:	2a 96       	adiw	r28, 0x0a	; 10
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <systemOperation>:
/*
 * Function Name :systemOperation()
 * Description   : Know the operation from HMI_ECU
 */
void systemOperation(void)
{
     4e0:	df 93       	push	r29
     4e2:	cf 93       	push	r28
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
	/* To save user options in Global variable to use it when starts the system*/
	SystemOperation=UART_recieveByte();
     4e8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
     4ec:	80 93 76 00 	sts	0x0076, r24
}
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <writeEEPROM>:
/*
 * Function Name : writeEEPROM()
 * Description   : Write in EEPROM in Assumption address
 */
void writeEEPROM(uint8 arr4[])
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <writeEEPROM+0x6>
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	9b 83       	std	Y+3, r25	; 0x03
     504:	8a 83       	std	Y+2, r24	; 0x02
	uint8 k;
	/* Write pass in EEPROM*/
	for(k=0 ;k<PASS_SIZE ;k++)
     506:	19 82       	std	Y+1, r1	; 0x01
     508:	16 c0       	rjmp	.+44     	; 0x536 <writeEEPROM+0x40>
	{
		EEPROM_writeByte((0x0C32)+k ,arr4[k]);
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	8e 5c       	subi	r24, 0xCE	; 206
     512:	93 4f       	sbci	r25, 0xF3	; 243
     514:	ac 01       	movw	r20, r24
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	28 2f       	mov	r18, r24
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	9b 81       	ldd	r25, Y+3	; 0x03
     520:	fc 01       	movw	r30, r24
     522:	e2 0f       	add	r30, r18
     524:	f3 1f       	adc	r31, r19
     526:	20 81       	ld	r18, Z
     528:	ca 01       	movw	r24, r20
     52a:	62 2f       	mov	r22, r18
     52c:	0e 94 ac 03 	call	0x758	; 0x758 <EEPROM_writeByte>
 */
void writeEEPROM(uint8 arr4[])
{
	uint8 k;
	/* Write pass in EEPROM*/
	for(k=0 ;k<PASS_SIZE ;k++)
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	38 f3       	brcs	.-50     	; 0x50a <writeEEPROM+0x14>
	{
		EEPROM_writeByte((0x0C32)+k ,arr4[k]);
	}

}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	08 95       	ret

00000548 <openDoor>:
/*
 * Function Name :openDoor()
 * Description   : Turn on Dc-Motor
 */
void openDoor(void)
{
     548:	df 93       	push	r29
     54a:	cf 93       	push	r28
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	/* Turn on DC motor in Maximum speed in CW*/
	DcMotor_Rotate(Clock_Wise ,255);
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	6f ef       	ldi	r22, 0xFF	; 255
     554:	0e 94 49 03 	call	0x692	; 0x692 <DcMotor_Rotate>
	/* count 15 sec from timer1*/
	myOwnDelay(15);
     558:	8f e0       	ldi	r24, 0x0F	; 15
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <myOwnDelay>
	/* turn off DcMotor*/
	DcMotor_Rotate(Stop ,0);
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 49 03 	call	0x692	; 0x692 <DcMotor_Rotate>
	/* count 3 sec fro timer 1*/
	myOwnDelay(3);
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <myOwnDelay>
	/* Turn on DC motor in Maximum speed in CCW*/
	DcMotor_Rotate(Anti_Clock_Wise ,255);
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	6f ef       	ldi	r22, 0xFF	; 255
     574:	0e 94 49 03 	call	0x692	; 0x692 <DcMotor_Rotate>
	/* count 15 sec from timer1*/
	myOwnDelay(15);
     578:	8f e0       	ldi	r24, 0x0F	; 15
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <myOwnDelay>
	/* turn off DcMotor*/
	DcMotor_Rotate(Stop ,0);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	0e 94 49 03 	call	0x692	; 0x692 <DcMotor_Rotate>
}
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <activeBuzzzer>:
/*
 * Function Name : activeBuzzzer()
 * Description   : Active buzzer for 1 minute
 */
void activeBuzzzer(void)
{
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
	/* Start turn on Buzzer*/
	BUZZER_On();
     596:	0e 94 5a 00 	call	0xb4	; 0xb4 <BUZZER_On>
	/* Count 60 sec from timer1*/
	myOwnDelay(60);
     59a:	8c e3       	ldi	r24, 0x3C	; 60
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <myOwnDelay>
	/* Turn off Buzzer again*/
	BUZZER_Off();
     5a2:	0e 94 66 00 	call	0xcc	; 0xcc <BUZZER_Off>
}
     5a6:	cf 91       	pop	r28
     5a8:	df 91       	pop	r29
     5aa:	08 95       	ret

000005ac <timerTicks>:
/*
 * Function Name : timerTicks()
 * Description   : increment number of ticks in timer1
 */
void timerTicks(void)
{
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     5b4:	80 91 73 00 	lds	r24, 0x0073
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 93 73 00 	sts	0x0073, r24
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	08 95       	ret

000005c4 <myOwnDelay>:
/*
 * Function Name : myOwnDelay()
 * Description   : delay till 2^16 sec maximum
 */
void myOwnDelay(uint16 sec)
{
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	2d 97       	sbiw	r28, 0x0d	; 13
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	98 87       	std	Y+8, r25	; 0x08
     5da:	8f 83       	std	Y+7, r24	; 0x07
	g_tick=0;
     5dc:	10 92 73 00 	sts	0x0073, r1
	 * 1.Initial value
	 * 2.compare value(in ctc mode)
	 * 3.prescaler
	 * 4.mode of operation
	 ***********************************************/
	Timer1_ConfigType Timer1_Confige = { 0 ,0 , N_64 , Normal};
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	9a 87       	std	Y+10, r25	; 0x0a
     5e6:	89 87       	std	Y+9, r24	; 0x09
     5e8:	e7 e6       	ldi	r30, 0x67	; 103
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	fc 87       	std	Y+12, r31	; 0x0c
     5ee:	eb 87       	std	Y+11, r30	; 0x0b
     5f0:	f6 e0       	ldi	r31, 0x06	; 6
     5f2:	fd 87       	std	Y+13, r31	; 0x0d
     5f4:	eb 85       	ldd	r30, Y+11	; 0x0b
     5f6:	fc 85       	ldd	r31, Y+12	; 0x0c
     5f8:	00 80       	ld	r0, Z
     5fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	9c 87       	std	Y+12, r25	; 0x0c
     602:	8b 87       	std	Y+11, r24	; 0x0b
     604:	e9 85       	ldd	r30, Y+9	; 0x09
     606:	fa 85       	ldd	r31, Y+10	; 0x0a
     608:	00 82       	st	Z, r0
     60a:	89 85       	ldd	r24, Y+9	; 0x09
     60c:	9a 85       	ldd	r25, Y+10	; 0x0a
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	9a 87       	std	Y+10, r25	; 0x0a
     612:	89 87       	std	Y+9, r24	; 0x09
     614:	9d 85       	ldd	r25, Y+13	; 0x0d
     616:	91 50       	subi	r25, 0x01	; 1
     618:	9d 87       	std	Y+13, r25	; 0x0d
     61a:	ed 85       	ldd	r30, Y+13	; 0x0d
     61c:	ee 23       	and	r30, r30
     61e:	51 f7       	brne	.-44     	; 0x5f4 <myOwnDelay+0x30>
	Timer1_init(&Timer1_Confige);
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Timer1_init>
	/* Used call back which call in ISR for time1*/
	Timer1_setCallBack(timerTicks);
     628:	86 ed       	ldi	r24, 0xD6	; 214
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <Timer1_setCallBack>

	while(g_tick < (2*sec));
     630:	80 91 73 00 	lds	r24, 0x0073
     634:	28 2f       	mov	r18, r24
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	8f 81       	ldd	r24, Y+7	; 0x07
     63a:	98 85       	ldd	r25, Y+8	; 0x08
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	28 17       	cp	r18, r24
     642:	39 07       	cpc	r19, r25
     644:	a8 f3       	brcs	.-22     	; 0x630 <myOwnDelay+0x6c>
	Timer1_deInit();
     646:	0e 94 73 08 	call	0x10e6	; 0x10e6 <Timer1_deInit>
}
     64a:	2d 96       	adiw	r28, 0x0d	; 13
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <DcMotor_init>:
 * 	The Function responsible for setup the direction for the two
 *	motor pins through the GPIO driver.
 *	Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_init(void)
{
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	/* Make Motor which connected to motor O/P pins*/
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,OUTPUT_PIN);
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	0e 94 4d 04 	call	0x89a	; 0x89a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,OUTPUT_PIN);
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	62 e0       	ldi	r22, 0x02	; 2
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	0e 94 4d 04 	call	0x89a	; 0x89a <GPIO_setupPinDirection>
	/*	Write LOW to make motor in Stop mode*/
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
}
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	08 95       	ret

00000692 <DcMotor_Rotate>:
 *	stop the motor based on the state input state value.
 *	Send the required duty cycle to the PWM driver based on the
 *  required speed value.
 */
void DcMotor_Rotate(DcMotor_State  state ,uint8 speed)
{
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	2a 97       	sbiw	r28, 0x0a	; 10
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	8c 83       	std	Y+4, r24	; 0x04
     6a8:	6d 83       	std	Y+5, r22	; 0x05
	/*
	 * 1.Fast PWM MODE
	 * 2.Non Inverting
	 * 3.Prescaler 8
	 */
	Config_Timer0 Timer0_Confige= {PWM_Fast , Non_Inverting , P_8};
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	9f 83       	std	Y+7, r25	; 0x07
     6b0:	8e 83       	std	Y+6, r24	; 0x06
     6b2:	ed e6       	ldi	r30, 0x6D	; 109
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	f9 87       	std	Y+9, r31	; 0x09
     6b8:	e8 87       	std	Y+8, r30	; 0x08
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	fa 87       	std	Y+10, r31	; 0x0a
     6be:	e8 85       	ldd	r30, Y+8	; 0x08
     6c0:	f9 85       	ldd	r31, Y+9	; 0x09
     6c2:	00 80       	ld	r0, Z
     6c4:	88 85       	ldd	r24, Y+8	; 0x08
     6c6:	99 85       	ldd	r25, Y+9	; 0x09
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	99 87       	std	Y+9, r25	; 0x09
     6cc:	88 87       	std	Y+8, r24	; 0x08
     6ce:	ee 81       	ldd	r30, Y+6	; 0x06
     6d0:	ff 81       	ldd	r31, Y+7	; 0x07
     6d2:	00 82       	st	Z, r0
     6d4:	8e 81       	ldd	r24, Y+6	; 0x06
     6d6:	9f 81       	ldd	r25, Y+7	; 0x07
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	9f 83       	std	Y+7, r25	; 0x07
     6dc:	8e 83       	std	Y+6, r24	; 0x06
     6de:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e0:	91 50       	subi	r25, 0x01	; 1
     6e2:	9a 87       	std	Y+10, r25	; 0x0a
     6e4:	ea 85       	ldd	r30, Y+10	; 0x0a
     6e6:	ee 23       	and	r30, r30
     6e8:	51 f7       	brne	.-44     	; 0x6be <DcMotor_Rotate+0x2c>
	/*Choose How DC_Motor Rotate CCW , CW ,Stop*/
	if(state==Stop)
     6ea:	8c 81       	ldd	r24, Y+4	; 0x04
     6ec:	88 23       	and	r24, r24
     6ee:	59 f4       	brne	.+22     	; 0x706 <DcMotor_Rotate+0x74>
	{
		/*Stop A=0  , B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
     704:	1b c0       	rjmp	.+54     	; 0x73c <DcMotor_Rotate+0xaa>
	}
	else if(state==Clock_Wise)
     706:	8c 81       	ldd	r24, Y+4	; 0x04
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	59 f4       	brne	.+22     	; 0x722 <DcMotor_Rotate+0x90>
	{
		/* CW A=1 ,B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_HIGH);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
     720:	0d c0       	rjmp	.+26     	; 0x73c <DcMotor_Rotate+0xaa>
	}
	else if(state==Anti_Clock_Wise)
     722:	8c 81       	ldd	r24, Y+4	; 0x04
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	51 f4       	brne	.+20     	; 0x73c <DcMotor_Rotate+0xaa>
	{
		/*Anti CCW A=0 ,B=1 */
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_HIGH);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	62 e0       	ldi	r22, 0x02	; 2
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 38 05 	call	0xa70	; 0xa70 <GPIO_writePin>
	}
	/*Call PWM from MCAL Throug DC_motor in HAL not Main and send to it Configuration*/
	PWM_Timer0_Start( &Timer0_Confige , speed);
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	6d 81       	ldd	r22, Y+5	; 0x05
     742:	0e 94 19 09 	call	0x1232	; 0x1232 <PWM_Timer0_Start>
}
     746:	2a 96       	adiw	r28, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	cf 91       	pop	r28
     754:	df 91       	pop	r29
     756:	08 95       	ret

00000758 <EEPROM_writeByte>:
/*
 * Function Name: EEPROM_writeByte()
 * Description:	write data into external EEPROM
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	00 d0       	rcall	.+0      	; 0x75e <EEPROM_writeByte+0x6>
     75e:	00 d0       	rcall	.+0      	; 0x760 <EEPROM_writeByte+0x8>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_Start();
     76a:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
    if (TWI_readStatus() != TWI_START)
     76e:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     772:	88 30       	cpi	r24, 0x08	; 8
     774:	11 f0       	breq	.+4      	; 0x77a <EEPROM_writeByte+0x22>
        return ERROR;
     776:	1c 82       	std	Y+4, r1	; 0x04
     778:	28 c0       	rjmp	.+80     	; 0x7ca <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	80 70       	andi	r24, 0x00	; 0
     780:	97 70       	andi	r25, 0x07	; 7
     782:	88 0f       	add	r24, r24
     784:	89 2f       	mov	r24, r25
     786:	88 1f       	adc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	91 95       	neg	r25
     78c:	80 6a       	ori	r24, 0xA0	; 160
     78e:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_SLA_W_ACK)
     792:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     796:	88 31       	cpi	r24, 0x18	; 24
     798:	11 f0       	breq	.+4      	; 0x79e <EEPROM_writeByte+0x46>
        return ERROR;
     79a:	1c 82       	std	Y+4, r1	; 0x04
     79c:	16 c0       	rjmp	.+44     	; 0x7ca <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_DATA_ACK)
     7a4:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     7a8:	88 32       	cpi	r24, 0x28	; 40
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <EEPROM_writeByte+0x58>
        return ERROR;
     7ac:	1c 82       	std	Y+4, r1	; 0x04
     7ae:	0d c0       	rjmp	.+26     	; 0x7ca <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_DATA_ACK)
     7b6:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     7ba:	88 32       	cpi	r24, 0x28	; 40
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <EEPROM_writeByte+0x6a>
        return ERROR;
     7be:	1c 82       	std	Y+4, r1	; 0x04
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_Stop();
     7c2:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_Stop>

    return SUCCESS;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	8c 83       	std	Y+4, r24	; 0x04
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
}
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <EEPROM_readByte+0x6>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <EEPROM_readByte+0x8>
     7e2:	0f 92       	push	r0
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	7c 83       	std	Y+4, r23	; 0x04
     7ee:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_Start();
     7f0:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
    if (TWI_readStatus() != TWI_START)
     7f4:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	11 f0       	breq	.+4      	; 0x800 <EEPROM_readByte+0x26>
        return ERROR;
     7fc:	1d 82       	std	Y+5, r1	; 0x05
     7fe:	44 c0       	rjmp	.+136    	; 0x888 <__stack+0x29>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	80 70       	andi	r24, 0x00	; 0
     806:	97 70       	andi	r25, 0x07	; 7
     808:	88 0f       	add	r24, r24
     80a:	89 2f       	mov	r24, r25
     80c:	88 1f       	adc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	91 95       	neg	r25
     812:	80 6a       	ori	r24, 0xA0	; 160
     814:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_SLA_W_ACK)
     818:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     81c:	88 31       	cpi	r24, 0x18	; 24
     81e:	11 f0       	breq	.+4      	; 0x824 <EEPROM_readByte+0x4a>
        return ERROR;
     820:	1d 82       	std	Y+5, r1	; 0x05
     822:	32 c0       	rjmp	.+100    	; 0x888 <__stack+0x29>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_DATA_ACK)
     82a:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     82e:	88 32       	cpi	r24, 0x28	; 40
     830:	11 f0       	breq	.+4      	; 0x836 <EEPROM_readByte+0x5c>
        return ERROR;
     832:	1d 82       	std	Y+5, r1	; 0x05
     834:	29 c0       	rjmp	.+82     	; 0x888 <__stack+0x29>

    /* Send the Repeated Start Bit */
    TWI_Start();
     836:	0e 94 b2 08 	call	0x1164	; 0x1164 <TWI_Start>
    if (TWI_readStatus() != TWI_REP_START)
     83a:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     83e:	80 31       	cpi	r24, 0x10	; 16
     840:	11 f0       	breq	.+4      	; 0x846 <EEPROM_readByte+0x6c>
        return ERROR;
     842:	1d 82       	std	Y+5, r1	; 0x05
     844:	21 c0       	rjmp	.+66     	; 0x888 <__stack+0x29>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	80 70       	andi	r24, 0x00	; 0
     84c:	97 70       	andi	r25, 0x07	; 7
     84e:	88 0f       	add	r24, r24
     850:	89 2f       	mov	r24, r25
     852:	88 1f       	adc	r24, r24
     854:	99 0b       	sbc	r25, r25
     856:	91 95       	neg	r25
     858:	81 6a       	ori	r24, 0xA1	; 161
     85a:	0e 94 cd 08 	call	0x119a	; 0x119a <TWI_writeByte>
    if (TWI_readStatus() != TWI_MT_SLA_R_ACK)
     85e:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     862:	80 34       	cpi	r24, 0x40	; 64
     864:	11 f0       	breq	.+4      	; 0x86a <__stack+0xb>
        return ERROR;
     866:	1d 82       	std	Y+5, r1	; 0x05
     868:	0f c0       	rjmp	.+30     	; 0x888 <__stack+0x29>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     86a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TWI_readByteWithNACK>
     86e:	eb 81       	ldd	r30, Y+3	; 0x03
     870:	fc 81       	ldd	r31, Y+4	; 0x04
     872:	80 83       	st	Z, r24
    if (TWI_readStatus() != TWI_MR_DATA_NACK)
     874:	0e 94 0a 09 	call	0x1214	; 0x1214 <TWI_readStatus>
     878:	88 35       	cpi	r24, 0x58	; 88
     87a:	11 f0       	breq	.+4      	; 0x880 <__stack+0x21>
        return ERROR;
     87c:	1d 82       	std	Y+5, r1	; 0x05
     87e:	04 c0       	rjmp	.+8      	; 0x888 <__stack+0x29>

    /* Send the Stop Bit */
    TWI_Stop();
     880:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_Stop>

    return SUCCESS;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	8d 83       	std	Y+5, r24	; 0x05
     888:	8d 81       	ldd	r24, Y+5	; 0x05
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	08 95       	ret

0000089a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num ,GPIO_pinDirectionType direction)
{
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <GPIO_setupPinDirection+0x6>
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <GPIO_setupPinDirection+0x8>
     8a2:	0f 92       	push	r0
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	6a 83       	std	Y+2, r22	; 0x02
     8ac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	84 30       	cpi	r24, 0x04	; 4
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <GPIO_setupPinDirection+0x1c>
     8b4:	d5 c0       	rjmp	.+426    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	88 30       	cpi	r24, 0x08	; 8
     8ba:	08 f0       	brcs	.+2      	; 0x8be <GPIO_setupPinDirection+0x24>
     8bc:	d1 c0       	rjmp	.+418    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	28 2f       	mov	r18, r24
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	3d 83       	std	Y+5, r19	; 0x05
     8c6:	2c 83       	std	Y+4, r18	; 0x04
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	9d 81       	ldd	r25, Y+5	; 0x05
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	91 05       	cpc	r25, r1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <GPIO_setupPinDirection+0x3a>
     8d2:	43 c0       	rjmp	.+134    	; 0x95a <GPIO_setupPinDirection+0xc0>
     8d4:	2c 81       	ldd	r18, Y+4	; 0x04
     8d6:	3d 81       	ldd	r19, Y+5	; 0x05
     8d8:	22 30       	cpi	r18, 0x02	; 2
     8da:	31 05       	cpc	r19, r1
     8dc:	2c f4       	brge	.+10     	; 0x8e8 <GPIO_setupPinDirection+0x4e>
     8de:	8c 81       	ldd	r24, Y+4	; 0x04
     8e0:	9d 81       	ldd	r25, Y+5	; 0x05
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	71 f0       	breq	.+28     	; 0x902 <GPIO_setupPinDirection+0x68>
     8e6:	bc c0       	rjmp	.+376    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
     8e8:	2c 81       	ldd	r18, Y+4	; 0x04
     8ea:	3d 81       	ldd	r19, Y+5	; 0x05
     8ec:	22 30       	cpi	r18, 0x02	; 2
     8ee:	31 05       	cpc	r19, r1
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <GPIO_setupPinDirection+0x5a>
     8f2:	5f c0       	rjmp	.+190    	; 0x9b2 <GPIO_setupPinDirection+0x118>
     8f4:	8c 81       	ldd	r24, Y+4	; 0x04
     8f6:	9d 81       	ldd	r25, Y+5	; 0x05
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	91 05       	cpc	r25, r1
     8fc:	09 f4       	brne	.+2      	; 0x900 <GPIO_setupPinDirection+0x66>
     8fe:	85 c0       	rjmp	.+266    	; 0xa0a <GPIO_setupPinDirection+0x170>
     900:	af c0       	rjmp	.+350    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == OUTPUT_PIN)
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	a1 f4       	brne	.+40     	; 0x930 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     908:	aa e3       	ldi	r26, 0x3A	; 58
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	ea e3       	ldi	r30, 0x3A	; 58
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	48 2f       	mov	r20, r24
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	02 2e       	mov	r0, r18
     920:	02 c0       	rjmp	.+4      	; 0x926 <GPIO_setupPinDirection+0x8c>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	0a 94       	dec	r0
     928:	e2 f7       	brpl	.-8      	; 0x922 <GPIO_setupPinDirection+0x88>
     92a:	84 2b       	or	r24, r20
     92c:	8c 93       	st	X, r24
     92e:	98 c0       	rjmp	.+304    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     930:	aa e3       	ldi	r26, 0x3A	; 58
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ea e3       	ldi	r30, 0x3A	; 58
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	48 2f       	mov	r20, r24
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	28 2f       	mov	r18, r24
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	02 2e       	mov	r0, r18
     948:	02 c0       	rjmp	.+4      	; 0x94e <GPIO_setupPinDirection+0xb4>
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	0a 94       	dec	r0
     950:	e2 f7       	brpl	.-8      	; 0x94a <GPIO_setupPinDirection+0xb0>
     952:	80 95       	com	r24
     954:	84 23       	and	r24, r20
     956:	8c 93       	st	X, r24
     958:	83 c0       	rjmp	.+262    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == OUTPUT_PIN)
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	a1 f4       	brne	.+40     	; 0x988 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     960:	a7 e3       	ldi	r26, 0x37	; 55
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e7 e3       	ldi	r30, 0x37	; 55
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	48 2f       	mov	r20, r24
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	02 2e       	mov	r0, r18
     978:	02 c0       	rjmp	.+4      	; 0x97e <GPIO_setupPinDirection+0xe4>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	0a 94       	dec	r0
     980:	e2 f7       	brpl	.-8      	; 0x97a <GPIO_setupPinDirection+0xe0>
     982:	84 2b       	or	r24, r20
     984:	8c 93       	st	X, r24
     986:	6c c0       	rjmp	.+216    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     988:	a7 e3       	ldi	r26, 0x37	; 55
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	e7 e3       	ldi	r30, 0x37	; 55
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	48 2f       	mov	r20, r24
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	02 2e       	mov	r0, r18
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <GPIO_setupPinDirection+0x10c>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <GPIO_setupPinDirection+0x108>
     9aa:	80 95       	com	r24
     9ac:	84 23       	and	r24, r20
     9ae:	8c 93       	st	X, r24
     9b0:	57 c0       	rjmp	.+174    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == OUTPUT_PIN)
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	a1 f4       	brne	.+40     	; 0x9e0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     9b8:	a4 e3       	ldi	r26, 0x34	; 52
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	e4 e3       	ldi	r30, 0x34	; 52
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	48 2f       	mov	r20, r24
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	02 2e       	mov	r0, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <GPIO_setupPinDirection+0x13c>
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	0a 94       	dec	r0
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <GPIO_setupPinDirection+0x138>
     9da:	84 2b       	or	r24, r20
     9dc:	8c 93       	st	X, r24
     9de:	40 c0       	rjmp	.+128    	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     9e0:	a4 e3       	ldi	r26, 0x34	; 52
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e4 e3       	ldi	r30, 0x34	; 52
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	48 2f       	mov	r20, r24
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	28 2f       	mov	r18, r24
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 2e       	mov	r0, r18
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <GPIO_setupPinDirection+0x164>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	0a 94       	dec	r0
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <GPIO_setupPinDirection+0x160>
     a02:	80 95       	com	r24
     a04:	84 23       	and	r24, r20
     a06:	8c 93       	st	X, r24
     a08:	2b c0       	rjmp	.+86     	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == OUTPUT_PIN)
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	a1 f4       	brne	.+40     	; 0xa38 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     a10:	a1 e3       	ldi	r26, 0x31	; 49
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e1 e3       	ldi	r30, 0x31	; 49
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	48 2f       	mov	r20, r24
     a1c:	8a 81       	ldd	r24, Y+2	; 0x02
     a1e:	28 2f       	mov	r18, r24
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 2e       	mov	r0, r18
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <GPIO_setupPinDirection+0x194>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	0a 94       	dec	r0
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <GPIO_setupPinDirection+0x190>
     a32:	84 2b       	or	r24, r20
     a34:	8c 93       	st	X, r24
     a36:	14 c0       	rjmp	.+40     	; 0xa60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     a38:	a1 e3       	ldi	r26, 0x31	; 49
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e1 e3       	ldi	r30, 0x31	; 49
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	48 2f       	mov	r20, r24
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 2e       	mov	r0, r18
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <GPIO_setupPinDirection+0x1bc>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	0a 94       	dec	r0
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <GPIO_setupPinDirection+0x1b8>
     a5a:	80 95       	com	r24
     a5c:	84 23       	and	r24, r20
     a5e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	00 d0       	rcall	.+0      	; 0xa76 <GPIO_writePin+0x6>
     a76:	00 d0       	rcall	.+0      	; 0xa78 <GPIO_writePin+0x8>
     a78:	0f 92       	push	r0
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	6a 83       	std	Y+2, r22	; 0x02
     a82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	08 f0       	brcs	.+2      	; 0xa8c <GPIO_writePin+0x1c>
     a8a:	d5 c0       	rjmp	.+426    	; 0xc36 <GPIO_writePin+0x1c6>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	88 30       	cpi	r24, 0x08	; 8
     a90:	08 f0       	brcs	.+2      	; 0xa94 <GPIO_writePin+0x24>
     a92:	d1 c0       	rjmp	.+418    	; 0xc36 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	3d 83       	std	Y+5, r19	; 0x05
     a9c:	2c 83       	std	Y+4, r18	; 0x04
     a9e:	8c 81       	ldd	r24, Y+4	; 0x04
     aa0:	9d 81       	ldd	r25, Y+5	; 0x05
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	91 05       	cpc	r25, r1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <GPIO_writePin+0x3a>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <GPIO_writePin+0xc0>
     aaa:	2c 81       	ldd	r18, Y+4	; 0x04
     aac:	3d 81       	ldd	r19, Y+5	; 0x05
     aae:	22 30       	cpi	r18, 0x02	; 2
     ab0:	31 05       	cpc	r19, r1
     ab2:	2c f4       	brge	.+10     	; 0xabe <GPIO_writePin+0x4e>
     ab4:	8c 81       	ldd	r24, Y+4	; 0x04
     ab6:	9d 81       	ldd	r25, Y+5	; 0x05
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	71 f0       	breq	.+28     	; 0xad8 <GPIO_writePin+0x68>
     abc:	bc c0       	rjmp	.+376    	; 0xc36 <GPIO_writePin+0x1c6>
     abe:	2c 81       	ldd	r18, Y+4	; 0x04
     ac0:	3d 81       	ldd	r19, Y+5	; 0x05
     ac2:	22 30       	cpi	r18, 0x02	; 2
     ac4:	31 05       	cpc	r19, r1
     ac6:	09 f4       	brne	.+2      	; 0xaca <GPIO_writePin+0x5a>
     ac8:	5f c0       	rjmp	.+190    	; 0xb88 <GPIO_writePin+0x118>
     aca:	8c 81       	ldd	r24, Y+4	; 0x04
     acc:	9d 81       	ldd	r25, Y+5	; 0x05
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	91 05       	cpc	r25, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <GPIO_writePin+0x66>
     ad4:	85 c0       	rjmp	.+266    	; 0xbe0 <GPIO_writePin+0x170>
     ad6:	af c0       	rjmp	.+350    	; 0xc36 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if( value == LOGIC_HIGH)
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	a1 f4       	brne	.+40     	; 0xb06 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ade:	ab e3       	ldi	r26, 0x3B	; 59
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	eb e3       	ldi	r30, 0x3B	; 59
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	48 2f       	mov	r20, r24
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	02 2e       	mov	r0, r18
     af6:	02 c0       	rjmp	.+4      	; 0xafc <GPIO_writePin+0x8c>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	0a 94       	dec	r0
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <GPIO_writePin+0x88>
     b00:	84 2b       	or	r24, r20
     b02:	8c 93       	st	X, r24
     b04:	98 c0       	rjmp	.+304    	; 0xc36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     b06:	ab e3       	ldi	r26, 0x3B	; 59
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	eb e3       	ldi	r30, 0x3B	; 59
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	48 2f       	mov	r20, r24
     b12:	8a 81       	ldd	r24, Y+2	; 0x02
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	02 2e       	mov	r0, r18
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <GPIO_writePin+0xb4>
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	0a 94       	dec	r0
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <GPIO_writePin+0xb0>
     b28:	80 95       	com	r24
     b2a:	84 23       	and	r24, r20
     b2c:	8c 93       	st	X, r24
     b2e:	83 c0       	rjmp	.+262    	; 0xc36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if( value == LOGIC_HIGH)
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	a1 f4       	brne	.+40     	; 0xb5e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     b36:	a8 e3       	ldi	r26, 0x38	; 56
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e8 e3       	ldi	r30, 0x38	; 56
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	48 2f       	mov	r20, r24
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	02 2e       	mov	r0, r18
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <GPIO_writePin+0xe4>
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	0a 94       	dec	r0
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <GPIO_writePin+0xe0>
     b58:	84 2b       	or	r24, r20
     b5a:	8c 93       	st	X, r24
     b5c:	6c c0       	rjmp	.+216    	; 0xc36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     b5e:	a8 e3       	ldi	r26, 0x38	; 56
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 e3       	ldi	r30, 0x38	; 56
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	48 2f       	mov	r20, r24
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	02 2e       	mov	r0, r18
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <GPIO_writePin+0x10c>
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	0a 94       	dec	r0
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <GPIO_writePin+0x108>
     b80:	80 95       	com	r24
     b82:	84 23       	and	r24, r20
     b84:	8c 93       	st	X, r24
     b86:	57 c0       	rjmp	.+174    	; 0xc36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if( value == LOGIC_HIGH)
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	a1 f4       	brne	.+40     	; 0xbb6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     b8e:	a5 e3       	ldi	r26, 0x35	; 53
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e5 e3       	ldi	r30, 0x35	; 53
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	48 2f       	mov	r20, r24
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <GPIO_writePin+0x13c>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <GPIO_writePin+0x138>
     bb0:	84 2b       	or	r24, r20
     bb2:	8c 93       	st	X, r24
     bb4:	40 c0       	rjmp	.+128    	; 0xc36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     bb6:	a5 e3       	ldi	r26, 0x35	; 53
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e5 e3       	ldi	r30, 0x35	; 53
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <GPIO_writePin+0x164>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <GPIO_writePin+0x160>
     bd8:	80 95       	com	r24
     bda:	84 23       	and	r24, r20
     bdc:	8c 93       	st	X, r24
     bde:	2b c0       	rjmp	.+86     	; 0xc36 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if( value == LOGIC_HIGH)
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	a1 f4       	brne	.+40     	; 0xc0e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     be6:	a2 e3       	ldi	r26, 0x32	; 50
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e2 e3       	ldi	r30, 0x32	; 50
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <GPIO_writePin+0x194>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <GPIO_writePin+0x190>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	14 c0       	rjmp	.+40     	; 0xc36 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     c0e:	a2 e3       	ldi	r26, 0x32	; 50
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e2 e3       	ldi	r30, 0x32	; 50
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <GPIO_writePin+0x1bc>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <GPIO_writePin+0x1b8>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num ,uint8 pin_num)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <GPIO_readPin+0x6>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <GPIO_readPin+0x8>
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	8a 83       	std	Y+2, r24	; 0x02
     c56:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value= LOGIC_LOW;
     c58:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	84 30       	cpi	r24, 0x04	; 4
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <GPIO_readPin+0x1c>
     c60:	84 c0       	rjmp	.+264    	; 0xd6a <GPIO_readPin+0x124>
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	88 30       	cpi	r24, 0x08	; 8
     c66:	08 f0       	brcs	.+2      	; 0xc6a <GPIO_readPin+0x24>
     c68:	80 c0       	rjmp	.+256    	; 0xd6a <GPIO_readPin+0x124>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	3d 83       	std	Y+5, r19	; 0x05
     c72:	2c 83       	std	Y+4, r18	; 0x04
     c74:	4c 81       	ldd	r20, Y+4	; 0x04
     c76:	5d 81       	ldd	r21, Y+5	; 0x05
     c78:	41 30       	cpi	r20, 0x01	; 1
     c7a:	51 05       	cpc	r21, r1
     c7c:	79 f1       	breq	.+94     	; 0xcdc <GPIO_readPin+0x96>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	91 05       	cpc	r25, r1
     c86:	34 f4       	brge	.+12     	; 0xc94 <GPIO_readPin+0x4e>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	21 15       	cp	r18, r1
     c8e:	31 05       	cpc	r19, r1
     c90:	69 f0       	breq	.+26     	; 0xcac <GPIO_readPin+0x66>
     c92:	6b c0       	rjmp	.+214    	; 0xd6a <GPIO_readPin+0x124>
     c94:	4c 81       	ldd	r20, Y+4	; 0x04
     c96:	5d 81       	ldd	r21, Y+5	; 0x05
     c98:	42 30       	cpi	r20, 0x02	; 2
     c9a:	51 05       	cpc	r21, r1
     c9c:	b9 f1       	breq	.+110    	; 0xd0c <GPIO_readPin+0xc6>
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	91 05       	cpc	r25, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <GPIO_readPin+0x64>
     ca8:	49 c0       	rjmp	.+146    	; 0xd3c <GPIO_readPin+0xf6>
     caa:	5f c0       	rjmp	.+190    	; 0xd6a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PORTA,pin_num))
     cac:	eb e3       	ldi	r30, 0x3B	; 59
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_readPin+0x7e>
     cc0:	55 95       	asr	r21
     cc2:	47 95       	ror	r20
     cc4:	8a 95       	dec	r24
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_readPin+0x7a>
     cc8:	ca 01       	movw	r24, r20
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	88 23       	and	r24, r24
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	49 c0       	rjmp	.+146    	; 0xd6a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     cd8:	19 82       	std	Y+1, r1	; 0x01
     cda:	47 c0       	rjmp	.+142    	; 0xd6a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PORTB,pin_num))
     cdc:	e8 e3       	ldi	r30, 0x38	; 56
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a9 01       	movw	r20, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <GPIO_readPin+0xae>
     cf0:	55 95       	asr	r21
     cf2:	47 95       	ror	r20
     cf4:	8a 95       	dec	r24
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <GPIO_readPin+0xaa>
     cf8:	ca 01       	movw	r24, r20
     cfa:	81 70       	andi	r24, 0x01	; 1
     cfc:	90 70       	andi	r25, 0x00	; 0
     cfe:	88 23       	and	r24, r24
     d00:	19 f0       	breq	.+6      	; 0xd08 <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	31 c0       	rjmp	.+98     	; 0xd6a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     d08:	19 82       	std	Y+1, r1	; 0x01
     d0a:	2f c0       	rjmp	.+94     	; 0xd6a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PORTC,pin_num))
     d0c:	e5 e3       	ldi	r30, 0x35	; 53
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a9 01       	movw	r20, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <GPIO_readPin+0xde>
     d20:	55 95       	asr	r21
     d22:	47 95       	ror	r20
     d24:	8a 95       	dec	r24
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <GPIO_readPin+0xda>
     d28:	ca 01       	movw	r24, r20
     d2a:	81 70       	andi	r24, 0x01	; 1
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	88 23       	and	r24, r24
     d30:	19 f0       	breq	.+6      	; 0xd38 <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	19 c0       	rjmp	.+50     	; 0xd6a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     d38:	19 82       	std	Y+1, r1	; 0x01
     d3a:	17 c0       	rjmp	.+46     	; 0xd6a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PORTA,pin_num))
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a9 01       	movw	r20, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_readPin+0x10e>
     d50:	55 95       	asr	r21
     d52:	47 95       	ror	r20
     d54:	8a 95       	dec	r24
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_readPin+0x10a>
     d58:	ca 01       	movw	r24, r20
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	88 23       	and	r24, r24
     d60:	19 f0       	breq	.+6      	; 0xd68 <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     d68:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <GPIO_setupPortDirection+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <GPIO_setupPortDirection+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	90 f5       	brcc	.+100    	; 0xdf6 <GPIO_setupPortDirection+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3c 83       	std	Y+4, r19	; 0x04
     d9a:	2b 83       	std	Y+3, r18	; 0x03
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	d1 f0       	breq	.+52     	; 0xdda <GPIO_setupPortDirection+0x5e>
     da6:	2b 81       	ldd	r18, Y+3	; 0x03
     da8:	3c 81       	ldd	r19, Y+4	; 0x04
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	2c f4       	brge	.+10     	; 0xdba <GPIO_setupPortDirection+0x3e>
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	61 f0       	breq	.+24     	; 0xdd0 <GPIO_setupPortDirection+0x54>
     db8:	1e c0       	rjmp	.+60     	; 0xdf6 <GPIO_setupPortDirection+0x7a>
     dba:	2b 81       	ldd	r18, Y+3	; 0x03
     dbc:	3c 81       	ldd	r19, Y+4	; 0x04
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	81 f0       	breq	.+32     	; 0xde4 <GPIO_setupPortDirection+0x68>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	91 05       	cpc	r25, r1
     dcc:	81 f0       	breq	.+32     	; 0xdee <GPIO_setupPortDirection+0x72>
     dce:	13 c0       	rjmp	.+38     	; 0xdf6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     dd0:	ea e3       	ldi	r30, 0x3A	; 58
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	80 83       	st	Z, r24
     dd8:	0e c0       	rjmp	.+28     	; 0xdf6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     dda:	e7 e3       	ldi	r30, 0x37	; 55
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	80 83       	st	Z, r24
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC= direction;
     de4:	e4 e3       	ldi	r30, 0x34	; 52
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	80 83       	st	Z, r24
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     dee:	e1 e3       	ldi	r30, 0x31	; 49
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	80 83       	st	Z, r24
			break;
		}
	}
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <GPIO_writePort+0x6>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <GPIO_writePort+0x8>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	90 f5       	brcc	.+100    	; 0xe7e <GPIO_writePort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3c 83       	std	Y+4, r19	; 0x04
     e22:	2b 83       	std	Y+3, r18	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	d1 f0       	breq	.+52     	; 0xe62 <GPIO_writePort+0x5e>
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	3c 81       	ldd	r19, Y+4	; 0x04
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <GPIO_writePort+0x3e>
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	61 f0       	breq	.+24     	; 0xe58 <GPIO_writePort+0x54>
     e40:	1e c0       	rjmp	.+60     	; 0xe7e <GPIO_writePort+0x7a>
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	81 f0       	breq	.+32     	; 0xe6c <GPIO_writePort+0x68>
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	81 f0       	breq	.+32     	; 0xe76 <GPIO_writePort+0x72>
     e56:	13 c0       	rjmp	.+38     	; 0xe7e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
     e58:	eb e3       	ldi	r30, 0x3B	; 59
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	80 83       	st	Z, r24
     e60:	0e c0       	rjmp	.+28     	; 0xe7e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
     e62:	e8 e3       	ldi	r30, 0x38	; 56
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	80 83       	st	Z, r24
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	80 83       	st	Z, r24
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	80 83       	st	Z, r24
			break;
		}
	}
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <GPIO_readPort+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <GPIO_readPort+0x8>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value=LOGIC_LOW;
     e9a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	90 f5       	brcc	.+100    	; 0xf06 <GPIO_readPort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3c 83       	std	Y+4, r19	; 0x04
     eaa:	2b 83       	std	Y+3, r18	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	d1 f0       	breq	.+52     	; 0xeea <GPIO_readPort+0x5e>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <GPIO_readPort+0x3e>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	61 f0       	breq	.+24     	; 0xee0 <GPIO_readPort+0x54>
     ec8:	1e c0       	rjmp	.+60     	; 0xf06 <GPIO_readPort+0x7a>
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	81 f0       	breq	.+32     	; 0xef4 <GPIO_readPort+0x68>
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	81 f0       	breq	.+32     	; 0xefe <GPIO_readPort+0x72>
     ede:	13 c0       	rjmp	.+38     	; 0xf06 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value= PINA;			/* PIN : READ Registers*/
     ee0:	e9 e3       	ldi	r30, 0x39	; 57
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	0e c0       	rjmp	.+28     	; 0xf06 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value= PINB;
     eea:	e6 e3       	ldi	r30, 0x36	; 54
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
     ef4:	e3 e3       	ldi	r30, 0x33	; 51
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value= PIND;
     efe:	e0 e3       	ldi	r30, 0x30	; 48
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <__vector_7>:

/***********************************************************
 * 				Interrupt Service Routine for Compare Mode
 ************************************************************/
ISR(TIMER1_COMPA_vect)
{
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_Ptr)
     f40:	80 91 74 00 	lds	r24, 0x0074
     f44:	90 91 75 00 	lds	r25, 0x0075
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	29 f0       	breq	.+10     	; 0xf56 <__vector_7+0x40>
	{
		g_ptr(); /* Call Back for function which i want to use it in ISR by pointer to function*/
     f4c:	e0 91 74 00 	lds	r30, 0x0074
     f50:	f0 91 75 00 	lds	r31, 0x0075
     f54:	09 95       	icall
	}
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_9>:
/***********************************************************
 * 				Interrupt Service Routine for Normal Mode
 ************************************************************/
ISR(TIMER1_OVF_vect)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_Ptr)
     fa6:	80 91 74 00 	lds	r24, 0x0074
     faa:	90 91 75 00 	lds	r25, 0x0075
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__vector_9+0x40>
	{
		g_ptr(); /* Call Back for function which i want to use it in ISR by pointer to function*/
     fb2:	e0 91 74 00 	lds	r30, 0x0074
     fb6:	f0 91 75 00 	lds	r31, 0x0075
     fba:	09 95       	icall
	}
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <Timer1_init>:
/*
 * Function Name: Timer1_init
 *	Description: Initialize Timer1 and select mode and prescaler
 */
void Timer1_init(const Timer1_ConfigType *Config_ptr)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <Timer1_init+0x6>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
	/*Initial value of Timer1*/
	TCNT1= Config_ptr->initial_value;
     ff0:	ac e4       	ldi	r26, 0x4C	; 76
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
	TCCR1B= (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    1002:	ae e4       	ldi	r26, 0x4E	; 78
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ee e4       	ldi	r30, 0x4E	; 78
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	98 2f       	mov	r25, r24
    100e:	98 7f       	andi	r25, 0xF8	; 248
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	84 81       	ldd	r24, Z+4	; 0x04
    1016:	89 2b       	or	r24, r25
    1018:	8c 93       	st	X, r24

	if(Config_ptr->mode == Normal)
    101a:	e9 81       	ldd	r30, Y+1	; 0x01
    101c:	fa 81       	ldd	r31, Y+2	; 0x02
    101e:	85 81       	ldd	r24, Z+5	; 0x05
    1020:	88 23       	and	r24, r24
    1022:	61 f4       	brne	.+24     	; 0x103c <Timer1_init+0x5a>
	{
		TCCR1A= (1<<FOC1A) | (1<<FOC1B);
    1024:	ef e4       	ldi	r30, 0x4F	; 79
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	8c e0       	ldi	r24, 0x0C	; 12
    102a:	80 83       	st	Z, r24
		TIMSK |= (1<<TOIE1);
    102c:	a9 e5       	ldi	r26, 0x59	; 89
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e9 e5       	ldi	r30, 0x59	; 89
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	8c 93       	st	X, r24
    103a:	3e c0       	rjmp	.+124    	; 0x10b8 <Timer1_init+0xd6>

	}
	else if(Config_ptr->mode == CTC_OCR1 )
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	85 81       	ldd	r24, Z+5	; 0x05
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	e1 f4       	brne	.+56     	; 0x107e <Timer1_init+0x9c>
	{
		TCCR1A= (1<<FOC1A) | (1<<FOC1B);
    1046:	ef e4       	ldi	r30, 0x4F	; 79
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8c e0       	ldi	r24, 0x0C	; 12
    104c:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
    104e:	ae e4       	ldi	r26, 0x4E	; 78
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ee e4       	ldi	r30, 0x4E	; 78
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 60       	ori	r24, 0x08	; 8
    105a:	8c 93       	st	X, r24
		OCR1A= Config_ptr->compare_value;
    105c:	aa e4       	ldi	r26, 0x4A	; 74
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
		TIMSK |= (1<< OCIE1A);
    106e:	a9 e5       	ldi	r26, 0x59	; 89
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e9 e5       	ldi	r30, 0x59	; 89
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	8c 93       	st	X, r24
    107c:	1d c0       	rjmp	.+58     	; 0x10b8 <Timer1_init+0xd6>
	}
	else if(Config_ptr->mode == CTC_ICR1)
    107e:	e9 81       	ldd	r30, Y+1	; 0x01
    1080:	fa 81       	ldd	r31, Y+2	; 0x02
    1082:	85 81       	ldd	r24, Z+5	; 0x05
    1084:	8c 30       	cpi	r24, 0x0C	; 12
    1086:	c1 f4       	brne	.+48     	; 0x10b8 <Timer1_init+0xd6>
	{
		TCCR1A= (1<<FOC1A) | (1<<FOC1B);
    1088:	ef e4       	ldi	r30, 0x4F	; 79
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8c e0       	ldi	r24, 0x0C	; 12
    108e:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (1<<WGM13);
    1090:	ee e4       	ldi	r30, 0x4E	; 78
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	88 e1       	ldi	r24, 0x18	; 24
    1096:	80 83       	st	Z, r24
		ICR1= Config_ptr->compare_value;
    1098:	a6 e4       	ldi	r26, 0x46	; 70
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	11 96       	adiw	r26, 0x01	; 1
    10a6:	9c 93       	st	X, r25
    10a8:	8e 93       	st	-X, r24
		TIMSK |= (1<< OCIE1A);
    10aa:	a9 e5       	ldi	r26, 0x59	; 89
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e5       	ldi	r30, 0x59	; 89
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	8c 93       	st	X, r24
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <Timer1_setCallBack>:
/*
 * Function Name: Timer1_setCallBack
 * Description: Call The function that i will implement it in ISR by save it's address in  global pointer to function
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <Timer1_setCallBack+0x6>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	90 93 75 00 	sts	0x0075, r25
    10d8:	80 93 74 00 	sts	0x0074, r24
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <Timer1_deInit>:
/*
 * Function Name: Timer1_deIinit
 * Description: de-activation Timer1
 */
void Timer1_deInit(void)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    10ee:	ec e4       	ldi	r30, 0x4C	; 76
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	11 82       	std	Z+1, r1	; 0x01
    10f4:	10 82       	st	Z, r1
	TCCR1A=0;
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	10 82       	st	Z, r1
	TCCR1B=0;
    10fc:	ee e4       	ldi	r30, 0x4E	; 78
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	10 82       	st	Z, r1
	TIMSK=0;
    1102:	e9 e5       	ldi	r30, 0x59	; 89
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	10 82       	st	Z, r1

}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <TWI_init>:
/*
 * Function Name : TWI_init()
 * Description	 : Initialize to TWI driver
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <TWI_init+0x6>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	/* Select Baud Rate*/
	TWBR = Config_Ptr->BAUD_RATE;
    111e:	a0 e2       	ldi	r26, 0x20	; 32
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e9 81       	ldd	r30, Y+1	; 0x01
    1124:	fa 81       	ldd	r31, Y+2	; 0x02
    1126:	80 81       	ld	r24, Z
    1128:	8c 93       	st	X, r24
	/*Enable Module*/
	TWCR |= (1<<TWEN);
    112a:	a6 e5       	ldi	r26, 0x56	; 86
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e6 e5       	ldi	r30, 0x56	; 86
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	84 60       	ori	r24, 0x04	; 4
    1136:	8c 93       	st	X, r24
	/**********************************************
	 * 1.Prescaler used in equation of baud rate = 0
	 * 2.Status bits = 0 , because ,they are read only
	 **********************************************/
	TWSR =0x00;
    1138:	e1 e2       	ldi	r30, 0x21	; 33
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	10 82       	st	Z, r1
	/**********************************************************************************
	 * 1.Select address , Note 7-bit address in the seven most significant bits of TWAR
	 * 2.Disable recognition of the general call address
	 **********************************************************************************/
	TWAR = (TWAR & 0x00) | (Config_Ptr->Address << 1);
    113e:	e2 e2       	ldi	r30, 0x22	; 34
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	a2 e2       	ldi	r26, 0x22	; 34
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	8c 93       	st	X, r24
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <TWI_Start>:
/*
 * Function Name : TWI_Start()
 * Description	 : send Start Condition
 */
void TWI_Start(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    /*************************************************************
	 * 1.Clear the TWINT flag before sending the start bit TWINT=1
	 * 2.send the start bit by TWSTA=1
	 * 3.Enable TWI Module TWEN=1
	 *************************************************************/
	TWCR = (1<<TWINT) | (1<<TWEN)  | (1<<TWSTA);
    116c:	e6 e5       	ldi	r30, 0x56	; 86
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	84 ea       	ldi	r24, 0xA4	; 164
    1172:	80 83       	st	Z, r24

	/* wait for flag set */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1174:	e6 e5       	ldi	r30, 0x56	; 86
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	dc f7       	brge	.-10     	; 0x1174 <TWI_Start+0x10>
}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <TWI_Stop>:
/*
 * Function Name : TWI_Stop()
 * Description	 : send Stop Condition
 */
void TWI_Stop(void)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    /*************************************************************
	 * 1.Clear the TWINT flag before sending the start bit TWINT=1
	 * 2.send the start bit by TWSTO=1
	 * 3.Enable TWI Module TWEN=1
	 *************************************************************/
	TWCR = (1<<TWINT) | (1<<TWEN)  | (1<<TWSTO);
    118c:	e6 e5       	ldi	r30, 0x56	; 86
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	84 e9       	ldi	r24, 0x94	; 148
    1192:	80 83       	st	Z, r24

}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <TWI_writeByte>:
/*
 * Function Name : TWI_writeByte()
 * Description	 : send data using TWI
 */
void TWI_writeByte(uint8 data)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	89 83       	std	Y+1, r24	; 0x01
	/* Move Data to TWDR register*/
	TWDR =data;
    11a6:	e3 e2       	ldi	r30, 0x23	; 35
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 83       	st	Z, r24
    /*************************************************************
	 * 1.Clear the TWINT flag before sending the start bit TWINT=1
	 * 2.Enable TWI Module TWEN=1
	 *************************************************************/
	TWCR = (1<<TWINT) | (1<<TWEN);
    11ae:	e6 e5       	ldi	r30, 0x56	; 86
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	84 e8       	ldi	r24, 0x84	; 132
    11b4:	80 83       	st	Z, r24
	/* wait for flag set */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <TWI_writeByte+0x1c>
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <TWI_readByteWithACK>:
/*
 * Function Name : TWI_readByteWithACK()
 * Description:  return a byte with ACK bit (0)
 */
uint8 TWI_readByteWithACK(void)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	/*************************************************************
	 * 1.Clear the TWINT flag before reading the data TWINT=1
	 * 2.Enable sending ACK after reading or receiving data TWEA=1
	 * 3.Enable TWI Module TWEN=1
	 **************************************************************/
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    11d0:	e6 e5       	ldi	r30, 0x56	; 86
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	84 ec       	ldi	r24, 0xC4	; 196
    11d6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11d8:	e6 e5       	ldi	r30, 0x56	; 86
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	dc f7       	brge	.-10     	; 0x11d8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    11e2:	e3 e2       	ldi	r30, 0x23	; 35
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <TWI_readByteWithNACK>:
/*
 * Function Name : TWI_readByteWithNACK()
 * Description:  return a byte with No ACK bit ---idle state =1
 */
uint8 TWI_readByteWithNACK(void)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	/*****************************************************
	 * 1.Clear the TWINT flag before reading the data TWINT=1
	 * 2.Enable TWI Module TWEN=1
	 *****************************************************/
    TWCR = (1 << TWINT) | (1 << TWEN);
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	84 e8       	ldi	r24, 0x84	; 132
    11fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11fe:	e6 e5       	ldi	r30, 0x56	; 86
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 23       	and	r24, r24
    1206:	dc f7       	brge	.-10     	; 0x11fe <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1208:	e3 e2       	ldi	r30, 0x23	; 35
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <TWI_readStatus>:
uint8 TWI_readStatus(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* Get only last 5 bits*/
    status = TWSR & 0xF8;
    121e:	e1 e2       	ldi	r30, 0x21	; 33
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	88 7f       	andi	r24, 0xF8	; 248
    1226:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
}
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <PWM_Timer0_Start>:
 * Function Name: PWM_Timer0_Start()
 * Description:
 * Generate Waveform on OC0 pin with frequency 488.28 HZ
 */
void PWM_Timer0_Start(const Config_Timer0 * Confige_Ptr , uint8 duty_cycle)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <PWM_Timer0_Start+0x6>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6b 83       	std	Y+3, r22	; 0x03
	 * 1.Set up Timer in Fast PWM Mode
	 * 2.Because WGM01 and WGM00 ,They're Not in Order
	 * 3.WGM01 BIT NUM 3 in TCCR0
	 * 4.WGM00 BIT NUM 6 in TCCR0
	 ************************************************************/
	TCCR0= (TCCR0 & 0xB7) | ((GET_BIT(Confige_Ptr ->Config_Mode,0))<<6) | (( GET_BIT(Confige_Ptr->Config_Mode,1))<<3);
    1244:	a3 e5       	ldi	r26, 0x53	; 83
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e3 e5       	ldi	r30, 0x53	; 83
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	27 7b       	andi	r18, 0xB7	; 183
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	80 81       	ld	r24, Z
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	00 24       	eor	r0, r0
    1262:	96 95       	lsr	r25
    1264:	87 95       	ror	r24
    1266:	07 94       	ror	r0
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	07 94       	ror	r0
    126e:	98 2f       	mov	r25, r24
    1270:	80 2d       	mov	r24, r0
    1272:	28 2b       	or	r18, r24
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	82 70       	andi	r24, 0x02	; 2
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	95 95       	asr	r25
    1284:	87 95       	ror	r24
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	82 2b       	or	r24, r18
    1294:	8c 93       	st	X, r24
	/* Non-Inverting PWM Mode Start from HIGH*/
	TCCR0 = ( TCCR0 & 0xCF) | (( Confige_Ptr->PWM_Mode)<<4);
    1296:	a3 e5       	ldi	r26, 0x53	; 83
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e3 e5       	ldi	r30, 0x53	; 83
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	28 2f       	mov	r18, r24
    12a2:	2f 7c       	andi	r18, 0xCF	; 207
    12a4:	e9 81       	ldd	r30, Y+1	; 0x01
    12a6:	fa 81       	ldd	r31, Y+2	; 0x02
    12a8:	81 81       	ldd	r24, Z+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	82 95       	swap	r24
    12b0:	92 95       	swap	r25
    12b2:	90 7f       	andi	r25, 0xF0	; 240
    12b4:	98 27       	eor	r25, r24
    12b6:	80 7f       	andi	r24, 0xF0	; 240
    12b8:	98 27       	eor	r25, r24
    12ba:	82 2b       	or	r24, r18
    12bc:	8c 93       	st	X, r24
	/*Choose PreScaler*/
	TCCR0 = ( TCCR0 & 0xF8 ) | (Confige_Ptr->Config_Prescaler);
    12be:	a3 e5       	ldi	r26, 0x53	; 83
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e3 e5       	ldi	r30, 0x53	; 83
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	98 2f       	mov	r25, r24
    12ca:	98 7f       	andi	r25, 0xF8	; 248
    12cc:	e9 81       	ldd	r30, Y+1	; 0x01
    12ce:	fa 81       	ldd	r31, Y+2	; 0x02
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	89 2b       	or	r24, r25
    12d4:	8c 93       	st	X, r24
	/*initial value 0 to timer register*/
	TCNT0=0;
    12d6:	e2 e5       	ldi	r30, 0x52	; 82
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1
	OCR0=duty_cycle;
    12dc:	ec e5       	ldi	r30, 0x5C	; 92
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	80 83       	st	Z, r24
	/*Make OC0/PB3 Output pin*/
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,OUTPUT_PIN);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	63 e0       	ldi	r22, 0x03	; 3
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	0e 94 4d 04 	call	0x89a	; 0x89a <GPIO_setupPinDirection>
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <UART_init>:
/*
 * Function Name : UART_init()
 * Description   : initialization uart driver
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <UART_init+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <UART_init+0x8>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9c 83       	std	Y+4, r25	; 0x04
    1308:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baudRate_value=0;
    130a:	1a 82       	std	Y+2, r1	; 0x02
    130c:	19 82       	std	Y+1, r1	; 0x01
	UCSRA |=(1<<U2X);				/*Double Transmission Speed*/
    130e:	ab e2       	ldi	r26, 0x2B	; 43
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e2       	ldi	r30, 0x2B	; 43
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	8c 93       	st	X, r24
	UCSRB= (1<<RXEN) | (1<<TXEN);	/* Enable Reciever and transmitter*/
    131c:	ea e2       	ldi	r30, 0x2A	; 42
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	88 e1       	ldi	r24, 0x18	; 24
    1322:	80 83       	st	Z, r24
	/*For 9-bit Mode*/
	if(Config_ptr->bitData==Bit_9)
    1324:	eb 81       	ldd	r30, Y+3	; 0x03
    1326:	fc 81       	ldd	r31, Y+4	; 0x04
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	87 30       	cpi	r24, 0x07	; 7
    132c:	39 f4       	brne	.+14     	; 0x133c <UART_init+0x42>
	{
		UCSRB |= (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);	/* specific for 9 bit data in AVR family*/
    132e:	aa e2       	ldi	r26, 0x2A	; 42
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ea e2       	ldi	r30, 0x2A	; 42
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	87 60       	ori	r24, 0x07	; 7
    133a:	8c 93       	st	X, r24
	}
	UCSRC |= (1<<URSEL);			/* To write in UCSRC register*/
    133c:	a0 e4       	ldi	r26, 0x40	; 64
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e0 e4       	ldi	r30, 0x40	; 64
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	8c 93       	st	X, r24
	/* insert parity bit choice*/
	UCSRC =(UCSRC & 0xC1) | ((Config_ptr->parity) << 4) ;
    134a:	a0 e4       	ldi	r26, 0x40	; 64
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e0 e4       	ldi	r30, 0x40	; 64
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	28 2f       	mov	r18, r24
    1356:	21 7c       	andi	r18, 0xC1	; 193
    1358:	eb 81       	ldd	r30, Y+3	; 0x03
    135a:	fc 81       	ldd	r31, Y+4	; 0x04
    135c:	80 81       	ld	r24, Z
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	82 95       	swap	r24
    1364:	92 95       	swap	r25
    1366:	90 7f       	andi	r25, 0xF0	; 240
    1368:	98 27       	eor	r25, r24
    136a:	80 7f       	andi	r24, 0xF0	; 240
    136c:	98 27       	eor	r25, r24
    136e:	82 2b       	or	r24, r18
    1370:	8c 93       	st	X, r24
	/* Choose stop bit*/
	if(Config_ptr->stopBit ==OneBit)
    1372:	eb 81       	ldd	r30, Y+3	; 0x03
    1374:	fc 81       	ldd	r31, Y+4	; 0x04
    1376:	81 81       	ldd	r24, Z+1	; 0x01
    1378:	88 23       	and	r24, r24
    137a:	41 f4       	brne	.+16     	; 0x138c <UART_init+0x92>
	{
		UCSRC &=~(1<<USBS);
    137c:	a0 e4       	ldi	r26, 0x40	; 64
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e0 e4       	ldi	r30, 0x40	; 64
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8c 93       	st	X, r24
    138a:	0c c0       	rjmp	.+24     	; 0x13a4 <UART_init+0xaa>
	}
	else if(Config_ptr->stopBit ==TwoBit)
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	39 f4       	brne	.+14     	; 0x13a4 <UART_init+0xaa>
	{
		UCSRC |= (1<<USBS);
    1396:	a0 e4       	ldi	r26, 0x40	; 64
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e0 e4       	ldi	r30, 0x40	; 64
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 60       	ori	r24, 0x08	; 8
    13a2:	8c 93       	st	X, r24
	}
	/*configurate data bits*/
	UCSRC |=(GET_BIT(Config_ptr->bitData , 0)<<1) | (GET_BIT(Config_ptr->bitData,1)<<2);
    13a4:	a0 e4       	ldi	r26, 0x40	; 64
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e0 e4       	ldi	r30, 0x40	; 64
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	38 2f       	mov	r19, r24
    13b0:	eb 81       	ldd	r30, Y+3	; 0x03
    13b2:	fc 81       	ldd	r31, Y+4	; 0x04
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	28 2f       	mov	r18, r24
    13c4:	eb 81       	ldd	r30, Y+3	; 0x03
    13c6:	fc 81       	ldd	r31, Y+4	; 0x04
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	82 70       	andi	r24, 0x02	; 2
    13d0:	90 70       	andi	r25, 0x00	; 0
    13d2:	95 95       	asr	r25
    13d4:	87 95       	ror	r24
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	82 2b       	or	r24, r18
    13e0:	83 2b       	or	r24, r19
    13e2:	8c 93       	st	X, r24

	baudRate_value= ((uint32)F_CPU/(8*Config_ptr->baudRate)) -1 ;	/*Equation to calculate BaudRate in Double speed Mode*/
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	83 81       	ldd	r24, Z+3	; 0x03
    13ea:	94 81       	ldd	r25, Z+4	; 0x04
    13ec:	a5 81       	ldd	r26, Z+5	; 0x05
    13ee:	b6 81       	ldd	r27, Z+6	; 0x06
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	aa 1f       	adc	r26, r26
    13f6:	bb 1f       	adc	r27, r27
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	aa 1f       	adc	r26, r26
    13fe:	bb 1f       	adc	r27, r27
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	aa 1f       	adc	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	9c 01       	movw	r18, r24
    140a:	ad 01       	movw	r20, r26
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	92 e1       	ldi	r25, 0x12	; 18
    1410:	aa e7       	ldi	r26, 0x7A	; 122
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 bd 0a 	call	0x157a	; 0x157a <__udivmodsi4>
    141c:	da 01       	movw	r26, r20
    141e:	c9 01       	movw	r24, r18
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	/* LSB 8 bits*/
	UBRRL=(uint8)baudRate_value;
    1426:	e9 e2       	ldi	r30, 0x29	; 41
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	80 83       	st	Z, r24
	/* MSB 8 bits*/
	UBRRH = (UBRRH & 0x70) | (baudRate_value>>8);
    142e:	a0 e4       	ldi	r26, 0x40	; 64
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e0 e4       	ldi	r30, 0x40	; 64
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	20 77       	andi	r18, 0x70	; 112
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	89 2f       	mov	r24, r25
    1442:	99 27       	eor	r25, r25
    1444:	82 2b       	or	r24, r18
    1446:	8c 93       	st	X, r24
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <UART_recieveByte>:
/*
 * Function Name: UART_recieveByte()
 * Description  : recieve byte from another uart , read UDR
 */
uint8 UART_recieveByte(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	/* wait until Clear reciever flag, refering to no data in recieve buffer*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    145e:	eb e2       	ldi	r30, 0x2B	; 43
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	dc f7       	brge	.-10     	; 0x145e <UART_recieveByte+0x8>
	/* Read byte from UDR*/
	return UDR;
    1468:	ec e2       	ldi	r30, 0x2C	; 44
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <UART_sendByte>:
/*
 * Function Name :UART_sendByte()
 * Description   : take data and send it to another uart driver
 */
void UART_sendByte(uint8 data)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
	/* wait until Clear data register flag, refering to no data in transmitter buffer*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1480:	eb e2       	ldi	r30, 0x2B	; 43
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	80 72       	andi	r24, 0x20	; 32
    148c:	90 70       	andi	r25, 0x00	; 0
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	b9 f3       	breq	.-18     	; 0x1480 <UART_sendByte+0xc>
	/* passing data to UDR register to read it */
	UDR=data;
    1492:	ec e2       	ldi	r30, 0x2C	; 44
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	80 83       	st	Z, r24
}
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <UART_sendString>:
/*
 * Function Name : UART_sendString()
 * Description   : Send a string using UART
 */
void UART_sendString(const uint8* Str)		/* Const, because it makes no any changes in string , just send it*/
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <UART_sendString+0x6>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <UART_sendString+0x30>
	/* send until null character*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <UART_sendByte>
		i++;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8* Str)		/* Const, because it makes no any changes in string , just send it*/
{
	uint8 i=0;
	/* send until null character*/
	while(Str[i] != '\0')
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	80 81       	ld	r24, Z
    14e4:	88 23       	and	r24, r24
    14e6:	39 f7       	brne	.-50     	; 0x14b6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <UART_recieveString>:
/*
 * Function Name :UART_recieveString()
 * Description   : recieve string from uart , with agreement by a specific character
 */
void UART_recieveString(uint8 *Str)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <UART_recieveString+0xa>
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1508:	19 82       	std	Y+1, r1	; 0x01
	/* get first byte*/
	Str[i]=UART_recieveByte();
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	8c 01       	movw	r16, r24
    1516:	02 0f       	add	r16, r18
    1518:	13 1f       	adc	r17, r19
    151a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
    151e:	f8 01       	movw	r30, r16
    1520:	80 83       	st	Z, r24
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <UART_recieveString+0x4e>
	/* choose a specific character '#'*/
	while(Str[i] != '#')
	{
		i++;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	89 83       	std	Y+1, r24	; 0x01
		Str[i]=UART_recieveByte();
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	8c 01       	movw	r16, r24
    1536:	02 0f       	add	r16, r18
    1538:	13 1f       	adc	r17, r19
    153a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <UART_recieveByte>
    153e:	f8 01       	movw	r30, r16
    1540:	80 83       	st	Z, r24
{
	uint8 i=0;
	/* get first byte*/
	Str[i]=UART_recieveByte();
	/* choose a specific character '#'*/
	while(Str[i] != '#')
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	fc 01       	movw	r30, r24
    154e:	e2 0f       	add	r30, r18
    1550:	f3 1f       	adc	r31, r19
    1552:	80 81       	ld	r24, Z
    1554:	83 32       	cpi	r24, 0x23	; 35
    1556:	31 f7       	brne	.-52     	; 0x1524 <UART_recieveString+0x30>
	{
		i++;
		Str[i]=UART_recieveByte();
	}
	/* insert null character to string */
	Str[i]='\0';
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	fc 01       	movw	r30, r24
    1564:	e2 0f       	add	r30, r18
    1566:	f3 1f       	adc	r31, r19
    1568:	10 82       	st	Z, r1
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <__udivmodsi4>:
    157a:	a1 e2       	ldi	r26, 0x21	; 33
    157c:	1a 2e       	mov	r1, r26
    157e:	aa 1b       	sub	r26, r26
    1580:	bb 1b       	sub	r27, r27
    1582:	fd 01       	movw	r30, r26
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <__udivmodsi4_ep>

00001586 <__udivmodsi4_loop>:
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	ee 1f       	adc	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	a2 17       	cp	r26, r18
    1590:	b3 07       	cpc	r27, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__udivmodsi4_ep>
    1598:	a2 1b       	sub	r26, r18
    159a:	b3 0b       	sbc	r27, r19
    159c:	e4 0b       	sbc	r30, r20
    159e:	f5 0b       	sbc	r31, r21

000015a0 <__udivmodsi4_ep>:
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	1a 94       	dec	r1
    15aa:	69 f7       	brne	.-38     	; 0x1586 <__udivmodsi4_loop>
    15ac:	60 95       	com	r22
    15ae:	70 95       	com	r23
    15b0:	80 95       	com	r24
    15b2:	90 95       	com	r25
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	bd 01       	movw	r22, r26
    15ba:	cf 01       	movw	r24, r30
    15bc:	08 95       	ret

000015be <_exit>:
    15be:	f8 94       	cli

000015c0 <__stop_program>:
    15c0:	ff cf       	rjmp	.-2      	; 0x15c0 <__stop_program>

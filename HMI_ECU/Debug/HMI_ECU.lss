
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00003146  000031da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800140  00800140  000032ba  2**0
                  ALLOC
  3 .stab         00002cc4  00000000  00000000  000032bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124a  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000730a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000747a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000090c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 35 18 	jmp	0x306a	; 0x306a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num ,GPIO_pinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(  (pin_num>=NUM_PINS_PER_PORT) || (port_num>=NUM_OF_PORTs) )
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == OUTPUT_PIN)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == OUTPUT_PIN)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == OUTPUT_PIN)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == OUTPUT_PIN)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(  (pin_num>=NUM_PINS_PER_PORT) || ( port_num>=NUM_OF_PORTs) )
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if( value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if( value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if( value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if( value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num ,uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value= LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(  (pin_num>=NUM_PINS_PER_PORT) || ( port_num>=NUM_OF_PORTs) )
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC= direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value=LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value= PINA;			/* PIN : READ Registers*/
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value= PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value= PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
/*
 * Function Name: main()
 * Description : implementation of HMI ECU app
 */
int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	2c 97       	sbiw	r28, 0x0c	; 12
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);					/* Enable i-bit*/
    11d6:	af e5       	ldi	r26, 0x5F	; 95
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e5       	ldi	r30, 0x5F	; 95
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	8c 93       	st	X, r24
	 * 1.Even Parity
	 * 2.stop bit --onebit
	 * 3.8 bits Data
	 * 4.Baudrate= 9600
	 ***********************************************/
	UART_ConfigType configurations = { Even, OneBit , Bit_8 , 9600 };
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	99 87       	std	Y+9, r25	; 0x09
    11ea:	88 87       	std	Y+8, r24	; 0x08
    11ec:	e2 e3       	ldi	r30, 0x32	; 50
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	fb 87       	std	Y+11, r31	; 0x0b
    11f2:	ea 87       	std	Y+10, r30	; 0x0a
    11f4:	f7 e0       	ldi	r31, 0x07	; 7
    11f6:	fc 87       	std	Y+12, r31	; 0x0c
    11f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    11fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    11fc:	00 80       	ld	r0, Z
    11fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1200:	9b 85       	ldd	r25, Y+11	; 0x0b
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9b 87       	std	Y+11, r25	; 0x0b
    1206:	8a 87       	std	Y+10, r24	; 0x0a
    1208:	e8 85       	ldd	r30, Y+8	; 0x08
    120a:	f9 85       	ldd	r31, Y+9	; 0x09
    120c:	00 82       	st	Z, r0
    120e:	88 85       	ldd	r24, Y+8	; 0x08
    1210:	99 85       	ldd	r25, Y+9	; 0x09
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	99 87       	std	Y+9, r25	; 0x09
    1216:	88 87       	std	Y+8, r24	; 0x08
    1218:	9c 85       	ldd	r25, Y+12	; 0x0c
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	9c 87       	std	Y+12, r25	; 0x0c
    121e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1220:	ee 23       	and	r30, r30
    1222:	51 f7       	brne	.-44     	; 0x11f8 <main+0x36>
	UART_init( &configurations);
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_init>

	/* Lcd initialization*/
	LCD_init();
    122c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <LCD_init>
	/* agreement(sink) between Two ECUs*/
	UART_sendByte(MC2_GET_READY);
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>

	LCD_displayString("plz enter pass:");
    1236:	80 e6       	ldi	r24, 0x60	; 96
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_displayString>
	LCD_moveCursor(1,0);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>

	while(1)
	{
		/* Get first step in system */
		insertNewPassword();
    1246:	0e 94 26 09 	call	0x124c	; 0x124c <insertNewPassword>
    124a:	fd cf       	rjmp	.-6      	; 0x1246 <main+0x84>

0000124c <insertNewPassword>:
/*
 * Function Name: insertNewPassword()
 * Description : Take a new Pass from user and Check it
 */
void insertNewPassword(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	a0 97       	sbiw	r28, 0x20	; 32
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
	key = KEYPAD_getPressedKey();
    1260:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <KEYPAD_getPressedKey>
    1264:	80 93 47 01 	sts	0x0147, r24
	switch(key)
    1268:	80 91 47 01 	lds	r24, 0x0147
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	38 a3       	std	Y+32, r19	; 0x20
    1272:	2f 8f       	std	Y+31, r18	; 0x1f
    1274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1276:	98 a1       	ldd	r25, Y+32	; 0x20
    1278:	99 23       	and	r25, r25
    127a:	0c f4       	brge	.+2      	; 0x127e <insertNewPassword+0x32>
    127c:	e3 c0       	rjmp	.+454    	; 0x1444 <insertNewPassword+0x1f8>
    127e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1280:	38 a1       	ldd	r19, Y+32	; 0x20
    1282:	2a 30       	cpi	r18, 0x0A	; 10
    1284:	31 05       	cpc	r19, r1
    1286:	3c f0       	brlt	.+14     	; 0x1296 <insertNewPassword+0x4a>
    1288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128a:	98 a1       	ldd	r25, Y+32	; 0x20
    128c:	8d 33       	cpi	r24, 0x3D	; 61
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <insertNewPassword+0x48>
    1292:	92 c0       	rjmp	.+292    	; 0x13b8 <insertNewPassword+0x16c>
    1294:	d7 c0       	rjmp	.+430    	; 0x1444 <insertNewPassword+0x1f8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		switch(numOfPass_flag)
    1296:	80 91 42 01 	lds	r24, 0x0142
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	00 96       	adiw	r24, 0x00	; 0
    12a0:	85 30       	cpi	r24, 0x05	; 5
    12a2:	91 05       	cpc	r25, r1
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <insertNewPassword+0x5c>
    12a6:	ce c0       	rjmp	.+412    	; 0x1444 <insertNewPassword+0x1f8>
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
			UART_sendByte(key);
    12a8:	80 91 47 01 	lds	r24, 0x0147
    12ac:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			LCD_integerToString(key);
    12b0:	80 91 47 01 	lds	r24, 0x0147
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_integerToString>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a8 e4       	ldi	r26, 0x48	; 72
    12c2:	b3 e4       	ldi	r27, 0x43	; 67
    12c4:	89 8f       	std	Y+25, r24	; 0x19
    12c6:	9a 8f       	std	Y+26, r25	; 0x1a
    12c8:	ab 8f       	std	Y+27, r26	; 0x1b
    12ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	69 8d       	ldd	r22, Y+25	; 0x19
    12ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	4a ef       	ldi	r20, 0xFA	; 250
    12da:	54 e4       	ldi	r21, 0x44	; 68
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	8d 8b       	std	Y+21, r24	; 0x15
    12e6:	9e 8b       	std	Y+22, r25	; 0x16
    12e8:	af 8b       	std	Y+23, r26	; 0x17
    12ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ec:	6d 89       	ldd	r22, Y+21	; 0x15
    12ee:	7e 89       	ldd	r23, Y+22	; 0x16
    12f0:	8f 89       	ldd	r24, Y+23	; 0x17
    12f2:	98 8d       	ldd	r25, Y+24	; 0x18
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e8       	ldi	r20, 0x80	; 128
    12fa:	5f e3       	ldi	r21, 0x3F	; 63
    12fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1300:	88 23       	and	r24, r24
    1302:	2c f4       	brge	.+10     	; 0x130e <insertNewPassword+0xc2>
		__ticks = 1;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 8b       	std	Y+20, r25	; 0x14
    130a:	8b 8b       	std	Y+19, r24	; 0x13
    130c:	3f c0       	rjmp	.+126    	; 0x138c <insertNewPassword+0x140>
	else if (__tmp > 65535)
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1322:	18 16       	cp	r1, r24
    1324:	4c f5       	brge	.+82     	; 0x1378 <insertNewPassword+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1326:	69 8d       	ldd	r22, Y+25	; 0x19
    1328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    132a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9c 8b       	std	Y+20, r25	; 0x14
    134c:	8b 8b       	std	Y+19, r24	; 0x13
    134e:	0f c0       	rjmp	.+30     	; 0x136e <insertNewPassword+0x122>
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9a 8b       	std	Y+18, r25	; 0x12
    1356:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1358:	89 89       	ldd	r24, Y+17	; 0x11
    135a:	9a 89       	ldd	r25, Y+18	; 0x12
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <insertNewPassword+0x110>
    1360:	9a 8b       	std	Y+18, r25	; 0x12
    1362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	8b 89       	ldd	r24, Y+19	; 0x13
    1366:	9c 89       	ldd	r25, Y+20	; 0x14
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136e:	8b 89       	ldd	r24, Y+19	; 0x13
    1370:	9c 89       	ldd	r25, Y+20	; 0x14
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	69 f7       	brne	.-38     	; 0x1350 <insertNewPassword+0x104>
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <insertNewPassword+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	9c 89       	ldd	r25, Y+20	; 0x14
    1390:	98 8b       	std	Y+16, r25	; 0x10
    1392:	8f 87       	std	Y+15, r24	; 0x0f
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	98 89       	ldd	r25, Y+16	; 0x10
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <insertNewPassword+0x14c>
    139c:	98 8b       	std	Y+16, r25	; 0x10
    139e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			LCD_sendCommand(0x10);
    13a0:	80 e1       	ldi	r24, 0x10	; 16
    13a2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
			LCD_displayCharacter('*');
    13a6:	8a e2       	ldi	r24, 0x2A	; 42
    13a8:	0e 94 83 11 	call	0x2306	; 0x2306 <LCD_displayCharacter>
			numOfPass_flag ++;				/* Num of digits for password*/
    13ac:	80 91 42 01 	lds	r24, 0x0142
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 42 01 	sts	0x0142, r24
    13b6:	46 c0       	rjmp	.+140    	; 0x1444 <insertNewPassword+0x1f8>
		break;
		case '=':
			/***************************************************
			 * 	Check that user insert pass from  five digits
			 ***************************************************/
			if(numOfPass_flag  != 0 && numOfPass_flag % 5 == 0 )
    13b8:	80 91 42 01 	lds	r24, 0x0142
    13bc:	88 23       	and	r24, r24
    13be:	71 f0       	breq	.+28     	; 0x13dc <insertNewPassword+0x190>
    13c0:	80 91 42 01 	lds	r24, 0x0142
    13c4:	95 e0       	ldi	r25, 0x05	; 5
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__udivmodqi4>
    13cc:	89 2f       	mov	r24, r25
    13ce:	88 23       	and	r24, r24
    13d0:	29 f4       	brne	.+10     	; 0x13dc <insertNewPassword+0x190>
			{
				equality_flag++;			/* Increment num of '=' refer to enter button*/
    13d2:	80 91 41 01 	lds	r24, 0x0141
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 41 01 	sts	0x0141, r24

			}
			switch(equality_flag)
    13dc:	80 91 41 01 	lds	r24, 0x0141
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3e 8f       	std	Y+30, r19	; 0x1e
    13e6:	2d 8f       	std	Y+29, r18	; 0x1d
    13e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	31 f0       	breq	.+12     	; 0x13fe <insertNewPassword+0x1b2>
    13f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	c9 f0       	breq	.+50     	; 0x142e <insertNewPassword+0x1e2>
    13fc:	23 c0       	rjmp	.+70     	; 0x1444 <insertNewPassword+0x1f8>
			{
			/* for enter first '='*/
			case 1:
				UART_sendByte(key);
    13fe:	80 91 47 01 	lds	r24, 0x0147
    1402:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				numOfPass_flag=0;
    1406:	10 92 42 01 	sts	0x0142, r1
				LCD_sendCommand(0x01);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
				LCD_displayStringRowColumn(0,0,"plz re-enter the");
    1410:	20 e7       	ldi	r18, 0x70	; 112
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"same pass:");
    141e:	21 e8       	ldi	r18, 0x81	; 129
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <insertNewPassword+0x1f8>
				break;
				/*For enter second enter*/
			case 2:
				UART_sendByte(key);
    142e:	80 91 47 01 	lds	r24, 0x0147
    1432:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				numOfPass_flag=0;
    1436:	10 92 42 01 	sts	0x0142, r1
				equality_flag=-1;
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	80 93 41 01 	sts	0x0141, r24
				recieveCheckingPass();		 /* Function take checking from control_ECU*/
    1440:	0e 94 9d 0a 	call	0x153a	; 0x153a <recieveCheckingPass>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a6 e9       	ldi	r26, 0x96	; 150
    144a:	b3 e4       	ldi	r27, 0x43	; 67
    144c:	8b 87       	std	Y+11, r24	; 0x0b
    144e:	9c 87       	std	Y+12, r25	; 0x0c
    1450:	ad 87       	std	Y+13, r26	; 0x0d
    1452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1454:	6b 85       	ldd	r22, Y+11	; 0x0b
    1456:	7c 85       	ldd	r23, Y+12	; 0x0c
    1458:	8d 85       	ldd	r24, Y+13	; 0x0d
    145a:	9e 85       	ldd	r25, Y+14	; 0x0e
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8f 83       	std	Y+7, r24	; 0x07
    146e:	98 87       	std	Y+8, r25	; 0x08
    1470:	a9 87       	std	Y+9, r26	; 0x09
    1472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <insertNewPassword+0x24a>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <insertNewPassword+0x2c8>
	else if (__tmp > 65535)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	4c f5       	brge	.+82     	; 0x1500 <insertNewPassword+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <insertNewPassword+0x2aa>
    14d8:	88 ec       	ldi	r24, 0xC8	; 200
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <insertNewPassword+0x298>
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <insertNewPassword+0x28c>
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <insertNewPassword+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <insertNewPassword+0x2d4>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
			}

			break;
	}
	_delay_ms(300);  /* Press time */
}
    1528:	a0 96       	adiw	r28, 0x20	; 32
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <recieveCheckingPass>:
 * Function Name: recieveCheckingPass()
 * Description  : Recieve if pass is true or false from Control_ECU
 */

void recieveCheckingPass(void)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	60 97       	sbiw	r28, 0x10	; 16
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
	/* agreement between two ECUs*/
	while(UART_recieveByte() != MC2_WILL_SEND_CHECK);
    154e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_recieveByte>
    1552:	80 32       	cpi	r24, 0x20	; 32
    1554:	e1 f7       	brne	.-8      	; 0x154e <recieveCheckingPass+0x14>
	/* Recieve checking of pass from another ECU*/
	switch(UART_recieveByte())
    1556:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_recieveByte>
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	38 8b       	std	Y+16, r19	; 0x10
    1560:	2f 87       	std	Y+15, r18	; 0x0f
    1562:	8f 85       	ldd	r24, Y+15	; 0x0f
    1564:	98 89       	ldd	r25, Y+16	; 0x10
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	91 05       	cpc	r25, r1
    156a:	49 f0       	breq	.+18     	; 0x157e <recieveCheckingPass+0x44>
    156c:	2f 85       	ldd	r18, Y+15	; 0x0f
    156e:	38 89       	ldd	r19, Y+16	; 0x10
    1570:	20 31       	cpi	r18, 0x10	; 16
    1572:	31 05       	cpc	r19, r1
    1574:	09 f0       	breq	.+2      	; 0x1578 <recieveCheckingPass+0x3e>
    1576:	97 c0       	rjmp	.+302    	; 0x16a6 <recieveCheckingPass+0x16c>
	{
	case PASS_IS_TRUE:
		/* Call function which starts running the system*/
		mainOptions();
    1578:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <mainOptions>
    157c:	94 c0       	rjmp	.+296    	; 0x16a6 <recieveCheckingPass+0x16c>
		break;
		/*Case Two pass are not matched*/
	case PASS_IS_FALSE:
		/* Just display LCD*/
		LCD_sendCommand(0x01);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
		LCD_displayStringRowColumn(0,2,"password are");
    1584:	2c e8       	ldi	r18, 0x8C	; 140
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	a9 01       	movw	r20, r18
    158e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,2,"not matched :(");
    1592:	29 e9       	ldi	r18, 0x99	; 153
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	a9 01       	movw	r20, r18
    159c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a6 e9       	ldi	r26, 0x96	; 150
    15a6:	b3 e4       	ldi	r27, 0x43	; 67
    15a8:	8b 87       	std	Y+11, r24	; 0x0b
    15aa:	9c 87       	std	Y+12, r25	; 0x0c
    15ac:	ad 87       	std	Y+13, r26	; 0x0d
    15ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a ef       	ldi	r20, 0xFA	; 250
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8f 83       	std	Y+7, r24	; 0x07
    15ca:	98 87       	std	Y+8, r25	; 0x08
    15cc:	a9 87       	std	Y+9, r26	; 0x09
    15ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <recieveCheckingPass+0xb8>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <recieveCheckingPass+0x136>
	else if (__tmp > 65535)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <recieveCheckingPass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <recieveCheckingPass+0x118>
    1634:	88 ec       	ldi	r24, 0xC8	; 200
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <recieveCheckingPass+0x106>
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <recieveCheckingPass+0xfa>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <recieveCheckingPass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	6f 81       	ldd	r22, Y+7	; 0x07
    165e:	78 85       	ldd	r23, Y+8	; 0x08
    1660:	89 85       	ldd	r24, Y+9	; 0x09
    1662:	9a 85       	ldd	r25, Y+10	; 0x0a
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <recieveCheckingPass+0x142>
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LCD_sendCommand(0x01);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
		LCD_displayStringRowColumn(0,0,"plz enter pass:");
    168a:	20 e6       	ldi	r18, 0x60	; 96
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	a9 01       	movw	r20, r18
    1694:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>
		/* Re-call fisrt Step in System*/
		for(;;)
		{
			insertNewPassword();
    16a0:	0e 94 26 09 	call	0x124c	; 0x124c <insertNewPassword>
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <recieveCheckingPass+0x166>
		}
		break;
	}

}
    16a6:	60 96       	adiw	r28, 0x10	; 16
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <mainOptions>:
/*
 * Function Name : mainOptions()
 * Description   : Choose which operation will be run
 */
void mainOptions(void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <mainOptions+0x6>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	uint8 userkey;
	/* just display LCD*/
	LCD_sendCommand(0x01);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0," + : Open Door");
    16ca:	28 ea       	ldi	r18, 0xA8	; 168
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0," - : Change Pass");
    16d8:	27 eb       	ldi	r18, 0xB7	; 183
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
    16e6:	1a c0       	rjmp	.+52     	; 0x171c <mainOptions+0x64>
	/* Confirm that user enter '+'  or '-' only*/
	while(userkey != '+' || userkey != '-')
	{
		userkey= KEYPAD_getPressedKey();
    16e8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <KEYPAD_getPressedKey>
    16ec:	89 83       	std	Y+1, r24	; 0x01
		switch(userkey)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3b 83       	std	Y+3, r19	; 0x03
    16f6:	2a 83       	std	Y+2, r18	; 0x02
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	8b 32       	cpi	r24, 0x2B	; 43
    16fe:	91 05       	cpc	r25, r1
    1700:	29 f0       	breq	.+10     	; 0x170c <mainOptions+0x54>
    1702:	2a 81       	ldd	r18, Y+2	; 0x02
    1704:	3b 81       	ldd	r19, Y+3	; 0x03
    1706:	2d 32       	cpi	r18, 0x2D	; 45
    1708:	31 05       	cpc	r19, r1
    170a:	41 f4       	brne	.+16     	; 0x171c <mainOptions+0x64>
		{
		case '+':
		case '-':
			UART_sendByte(userkey);
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
			/* Passing user option to global variable to use it when run the system*/
			userChoice = userkey;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	80 93 46 01 	sts	0x0146, r24
			/* Call function That take pass from user*/
			getUserPass();
    1718:	0e 94 9a 0b 	call	0x1734	; 0x1734 <getUserPass>
	/* just display LCD*/
	LCD_sendCommand(0x01);
	LCD_displayStringRowColumn(0,0," + : Open Door");
	LCD_displayStringRowColumn(1,0," - : Change Pass");
	/* Confirm that user enter '+'  or '-' only*/
	while(userkey != '+' || userkey != '-')
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	8b 32       	cpi	r24, 0x2B	; 43
    1720:	19 f7       	brne	.-58     	; 0x16e8 <mainOptions+0x30>
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	8d 32       	cpi	r24, 0x2D	; 45
    1726:	01 f7       	brne	.-64     	; 0x16e8 <mainOptions+0x30>
			getUserPass();
			break;
		}

	}
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <getUserPass>:
/*
 * Function Name: getUserPass()
 * Description  : get The user pass to run the system ^_^
 */
void getUserPass()
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	a0 97       	sbiw	r28, 0x20	; 32
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
	uint8 userPass;
	uint8 digits=0;
    1748:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Agreement between two ECUs*/
	UART_sendByte(MC2_READY_TO_GET_USER_PASS);
    174a:	8e ee       	ldi	r24, 0xEE	; 238
    174c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
	/* Just Display*/
	LCD_sendCommand(0x01);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,"plz enter pass:");
    1756:	20 e6       	ldi	r18, 0x60	; 96
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>
    176c:	26 c1       	rjmp	.+588    	; 0x19ba <getUserPass+0x286>
	/* Take Password until user push on enter "=" button*/
	while(userPass != '=')
	{
		userPass = KEYPAD_getPressedKey();
    176e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <KEYPAD_getPressedKey>
    1772:	8e 8f       	std	Y+30, r24	; 0x1e
		switch(userPass)
    1774:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	38 a3       	std	Y+32, r19	; 0x20
    177c:	2f 8f       	std	Y+31, r18	; 0x1f
    177e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1780:	98 a1       	ldd	r25, Y+32	; 0x20
    1782:	99 23       	and	r25, r25
    1784:	0c f4       	brge	.+2      	; 0x1788 <getUserPass+0x54>
    1786:	a7 c0       	rjmp	.+334    	; 0x18d6 <getUserPass+0x1a2>
    1788:	2f 8d       	ldd	r18, Y+31	; 0x1f
    178a:	38 a1       	ldd	r19, Y+32	; 0x20
    178c:	2a 30       	cpi	r18, 0x0A	; 10
    178e:	31 05       	cpc	r19, r1
    1790:	3c f0       	brlt	.+14     	; 0x17a0 <getUserPass+0x6c>
    1792:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1794:	98 a1       	ldd	r25, Y+32	; 0x20
    1796:	8d 33       	cpi	r24, 0x3D	; 61
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <getUserPass+0x6a>
    179c:	89 c0       	rjmp	.+274    	; 0x18b0 <getUserPass+0x17c>
    179e:	9b c0       	rjmp	.+310    	; 0x18d6 <getUserPass+0x1a2>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			if(digits<5)
    17a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a2:	85 30       	cpi	r24, 0x05	; 5
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <getUserPass+0x74>
    17a6:	97 c0       	rjmp	.+302    	; 0x18d6 <getUserPass+0x1a2>
			{
				UART_sendByte(userPass);
    17a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17aa:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				LCD_integerToString(userPass);
    17ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_integerToString>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a8 e4       	ldi	r26, 0x48	; 72
    17be:	b3 e4       	ldi	r27, 0x43	; 67
    17c0:	89 8f       	std	Y+25, r24	; 0x19
    17c2:	9a 8f       	std	Y+26, r25	; 0x1a
    17c4:	ab 8f       	std	Y+27, r26	; 0x1b
    17c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8d 8b       	std	Y+21, r24	; 0x15
    17e2:	9e 8b       	std	Y+22, r25	; 0x16
    17e4:	af 8b       	std	Y+23, r26	; 0x17
    17e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17e8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ea:	7e 89       	ldd	r23, Y+22	; 0x16
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	98 8d       	ldd	r25, Y+24	; 0x18
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <getUserPass+0xd6>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 8b       	std	Y+20, r25	; 0x14
    1806:	8b 8b       	std	Y+19, r24	; 0x13
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <getUserPass+0x154>
	else if (__tmp > 65535)
    180a:	6d 89       	ldd	r22, Y+21	; 0x15
    180c:	7e 89       	ldd	r23, Y+22	; 0x16
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <getUserPass+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	69 8d       	ldd	r22, Y+25	; 0x19
    1824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9c 8b       	std	Y+20, r25	; 0x14
    1848:	8b 8b       	std	Y+19, r24	; 0x13
    184a:	0f c0       	rjmp	.+30     	; 0x186a <getUserPass+0x136>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9a 8b       	std	Y+18, r25	; 0x12
    1852:	89 8b       	std	Y+17, r24	; 0x11
    1854:	89 89       	ldd	r24, Y+17	; 0x11
    1856:	9a 89       	ldd	r25, Y+18	; 0x12
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <getUserPass+0x124>
    185c:	9a 8b       	std	Y+18, r25	; 0x12
    185e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8b 89       	ldd	r24, Y+19	; 0x13
    186c:	9c 89       	ldd	r25, Y+20	; 0x14
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <getUserPass+0x118>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <getUserPass+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
    1888:	8b 89       	ldd	r24, Y+19	; 0x13
    188a:	9c 89       	ldd	r25, Y+20	; 0x14
    188c:	98 8b       	std	Y+16, r25	; 0x10
    188e:	8f 87       	std	Y+15, r24	; 0x0f
    1890:	8f 85       	ldd	r24, Y+15	; 0x0f
    1892:	98 89       	ldd	r25, Y+16	; 0x10
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <getUserPass+0x160>
    1898:	98 8b       	std	Y+16, r25	; 0x10
    189a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				LCD_sendCommand(0x10);
    189c:	80 e1       	ldi	r24, 0x10	; 16
    189e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
				LCD_displayCharacter('*');
    18a2:	8a e2       	ldi	r24, 0x2A	; 42
    18a4:	0e 94 83 11 	call	0x2306	; 0x2306 <LCD_displayCharacter>
				digits++;
    18a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	8d 8f       	std	Y+29, r24	; 0x1d
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <getUserPass+0x1a2>
			}
			break;
		case '=' :
			if(digits  != 0 && digits % 5 == 0 )
    18b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b2:	88 23       	and	r24, r24
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <getUserPass+0x19e>
    18b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b8:	95 e0       	ldi	r25, 0x05	; 5
    18ba:	69 2f       	mov	r22, r25
    18bc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__udivmodqi4>
    18c0:	89 2f       	mov	r24, r25
    18c2:	88 23       	and	r24, r24
    18c4:	31 f4       	brne	.+12     	; 0x18d2 <getUserPass+0x19e>
			{
				UART_sendByte(userPass);
    18c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c8:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
				/* Start Running the system*/
				systemRun();
    18cc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <systemRun>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <getUserPass+0x1a2>
			}
			else
			{
				userPass =' ';
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	8e 8f       	std	Y+30, r24	; 0x1e
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a6 e9       	ldi	r26, 0x96	; 150
    18dc:	b3 e4       	ldi	r27, 0x43	; 67
    18de:	8b 87       	std	Y+11, r24	; 0x0b
    18e0:	9c 87       	std	Y+12, r25	; 0x0c
    18e2:	ad 87       	std	Y+13, r26	; 0x0d
    18e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a ef       	ldi	r20, 0xFA	; 250
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	8f 83       	std	Y+7, r24	; 0x07
    1900:	98 87       	std	Y+8, r25	; 0x08
    1902:	a9 87       	std	Y+9, r26	; 0x09
    1904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	2c f4       	brge	.+10     	; 0x1928 <getUserPass+0x1f4>
		__ticks = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	3f c0       	rjmp	.+126    	; 0x19a6 <getUserPass+0x272>
	else if (__tmp > 65535)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	4c f5       	brge	.+82     	; 0x1992 <getUserPass+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	6b 85       	ldd	r22, Y+11	; 0x0b
    1942:	7c 85       	ldd	r23, Y+12	; 0x0c
    1944:	8d 85       	ldd	r24, Y+13	; 0x0d
    1946:	9e 85       	ldd	r25, Y+14	; 0x0e
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <getUserPass+0x254>
    196a:	88 ec       	ldi	r24, 0xC8	; 200
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <getUserPass+0x242>
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	69 f7       	brne	.-38     	; 0x196a <getUserPass+0x236>
    1990:	14 c0       	rjmp	.+40     	; 0x19ba <getUserPass+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <getUserPass+0x27e>
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
	/* Just Display*/
	LCD_sendCommand(0x01);
	LCD_displayStringRowColumn(0,0,"plz enter pass:");
	LCD_moveCursor(1,0);
	/* Take Password until user push on enter "=" button*/
	while(userPass != '=')
    19ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19bc:	8d 33       	cpi	r24, 0x3D	; 61
    19be:	09 f0       	breq	.+2      	; 0x19c2 <getUserPass+0x28e>
    19c0:	d6 ce       	rjmp	.-596    	; 0x176e <getUserPass+0x3a>
			break;
		}
		_delay_ms(300);  /* Press time */
	}

}
    19c2:	a0 96       	adiw	r28, 0x20	; 32
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <systemRun>:
/*
 * Function Name : systemRun()
 * Description   : Recieve if pass equal the same pass in EEPROM and display operation depends on user choice
 */
void systemRun(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	a0 97       	sbiw	r28, 0x20	; 32
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	/* Agreement between two ECUs*/
	UART_sendByte(CHECK_USER_PASS);
    19e8:	85 e5       	ldi	r24, 0x55	; 85
    19ea:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
	/* Check if pass is true or not*/
	switch(UART_recieveByte())
    19ee:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_recieveByte>
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	38 a3       	std	Y+32, r19	; 0x20
    19f8:	2f 8f       	std	Y+31, r18	; 0x1f
    19fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19fc:	98 a1       	ldd	r25, Y+32	; 0x20
    19fe:	86 31       	cpi	r24, 0x16	; 22
    1a00:	91 05       	cpc	r25, r1
    1a02:	79 f1       	breq	.+94     	; 0x1a62 <systemRun+0x8e>
    1a04:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1a06:	38 a1       	ldd	r19, Y+32	; 0x20
    1a08:	27 31       	cpi	r18, 0x17	; 23
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <systemRun+0x3c>
    1a0e:	50 c1       	rjmp	.+672    	; 0x1cb0 <systemRun+0x2dc>
	{
	case USER_PASS_IS_TRUE:
	{
		failedAttemp=0; /* Retrun failed attemps to zero */
    1a10:	10 92 40 01 	sts	0x0140, r1
		/* Check on user options*/
		switch(userChoice)
    1a14:	80 91 46 01 	lds	r24, 0x0146
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3e 8f       	std	Y+30, r19	; 0x1e
    1a1e:	2d 8f       	std	Y+29, r18	; 0x1d
    1a20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a24:	8b 32       	cpi	r24, 0x2B	; 43
    1a26:	91 05       	cpc	r25, r1
    1a28:	31 f0       	breq	.+12     	; 0x1a36 <systemRun+0x62>
    1a2a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1a2c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a2e:	2d 32       	cpi	r18, 0x2D	; 45
    1a30:	31 05       	cpc	r19, r1
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <systemRun+0x6c>
    1a34:	3d c1       	rjmp	.+634    	; 0x1cb0 <systemRun+0x2dc>
		{
		case '+':
			/* open Door display*/
			openDoorDisplay();
    1a36:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <openDoorDisplay>
			/* re-turn to options*/
			mainOptions();
    1a3a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <mainOptions>
    1a3e:	38 c1       	rjmp	.+624    	; 0x1cb0 <systemRun+0x2dc>
			break;
		case '-':
			/* Change Password*/
			LCD_sendCommand(0x01);
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"Enter New Pass:");
    1a46:	28 ec       	ldi	r18, 0xC8	; 200
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>
			/* Re-call to first step*/
			for(;;)
			{
				insertNewPassword();
    1a5c:	0e 94 26 09 	call	0x124c	; 0x124c <insertNewPassword>
    1a60:	fd cf       	rjmp	.-6      	; 0x1a5c <systemRun+0x88>
	break;
	/* Case user pass is false*/
	case USER_PASS_IS_FALSE:
	{
		/* increment failed attemps*/
		failedAttemp++;
    1a62:	80 91 40 01 	lds	r24, 0x0140
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	80 93 40 01 	sts	0x0140, r24
		/* Check if failed attemps is three contious attemps*/
		switch(failedAttemp)
    1a6c:	80 91 40 01 	lds	r24, 0x0140
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <systemRun+0xa8>
    1a7a:	8b c0       	rjmp	.+278    	; 0x1b92 <systemRun+0x1be>
		{
		case 3:
			LCD_sendCommand(0x01);
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
			LCD_displayStringRowColumn(0,4,"ERROR !!");
    1a82:	28 ed       	ldi	r18, 0xD8	; 216
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Disabled System");
    1a90:	21 ee       	ldi	r18, 0xE1	; 225
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
			myOwnDelay(60);
    1a9e:	8c e3       	ldi	r24, 0x3C	; 60
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <myOwnDelay>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a6 e1       	ldi	r26, 0x16	; 22
    1aac:	b3 e4       	ldi	r27, 0x43	; 67
    1aae:	89 8f       	std	Y+25, r24	; 0x19
    1ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ab4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8d 8b       	std	Y+21, r24	; 0x15
    1ad0:	9e 8b       	std	Y+22, r25	; 0x16
    1ad2:	af 8b       	std	Y+23, r26	; 0x17
    1ad4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ada:	8f 89       	ldd	r24, Y+23	; 0x17
    1adc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <systemRun+0x124>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <systemRun+0x1a2>
	else if (__tmp > 65535)
    1af8:	6d 89       	ldd	r22, Y+21	; 0x15
    1afa:	7e 89       	ldd	r23, Y+22	; 0x16
    1afc:	8f 89       	ldd	r24, Y+23	; 0x17
    1afe:	98 8d       	ldd	r25, Y+24	; 0x18
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <systemRun+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	69 8d       	ldd	r22, Y+25	; 0x19
    1b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <systemRun+0x184>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9a 8b       	std	Y+18, r25	; 0x12
    1b40:	89 8b       	std	Y+17, r24	; 0x11
    1b42:	89 89       	ldd	r24, Y+17	; 0x11
    1b44:	9a 89       	ldd	r25, Y+18	; 0x12
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <systemRun+0x172>
    1b4a:	9a 8b       	std	Y+18, r25	; 0x12
    1b4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b50:	9c 89       	ldd	r25, Y+20	; 0x14
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <systemRun+0x166>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <systemRun+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6d 89       	ldd	r22, Y+21	; 0x15
    1b64:	7e 89       	ldd	r23, Y+22	; 0x16
    1b66:	8f 89       	ldd	r24, Y+23	; 0x17
    1b68:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	8b 89       	ldd	r24, Y+19	; 0x13
    1b78:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7a:	98 8b       	std	Y+16, r25	; 0x10
    1b7c:	8f 87       	std	Y+15, r24	; 0x0f
    1b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b80:	98 89       	ldd	r25, Y+16	; 0x10
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <systemRun+0x1ae>
    1b86:	98 8b       	std	Y+16, r25	; 0x10
    1b88:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(150);
			failedAttemp=0;
    1b8a:	10 92 40 01 	sts	0x0140, r1
			mainOptions();
    1b8e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <mainOptions>
			break;
		}
		/* Just LCD display*/
		LCD_sendCommand(0x01);
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
		LCD_displayStringRowColumn(0,2,"Wrong Password");
    1b98:	21 ef       	ldi	r18, 0xF1	; 241
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
		LCD_moveCursor(1,5);
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	65 e0       	ldi	r22, 0x05	; 5
    1baa:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>
		LCD_integerToString(failedAttemp);
    1bae:	80 91 40 01 	lds	r24, 0x0140
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_integerToString>
		LCD_displayStringRowColumn(1,6,"/3");
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	31 e0       	ldi	r19, 0x01	; 1
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	66 e0       	ldi	r22, 0x06	; 6
    1bc2:	a9 01       	movw	r20, r18
    1bc4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	aa ef       	ldi	r26, 0xFA	; 250
    1bce:	b3 e4       	ldi	r27, 0x43	; 67
    1bd0:	8b 87       	std	Y+11, r24	; 0x0b
    1bd2:	9c 87       	std	Y+12, r25	; 0x0c
    1bd4:	ad 87       	std	Y+13, r26	; 0x0d
    1bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8f 83       	std	Y+7, r24	; 0x07
    1bf2:	98 87       	std	Y+8, r25	; 0x08
    1bf4:	a9 87       	std	Y+9, r26	; 0x09
    1bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <systemRun+0x246>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <systemRun+0x2c4>
	else if (__tmp > 65535)
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <systemRun+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <systemRun+0x2a6>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <systemRun+0x294>
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <systemRun+0x288>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <systemRun+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <systemRun+0x2d0>
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/* return to take user pass*/
		getUserPass();
    1cac:	0e 94 9a 0b 	call	0x1734	; 0x1734 <getUserPass>
		break;
	}
	}
}
    1cb0:	a0 96       	adiw	r28, 0x20	; 32
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <openDoorDisplay>:
/*
 * Function Name : openDoorDisplay()
 * Description   : Display that door is unlocking
 */
void openDoorDisplay(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	/* Just display*/
	LCD_sendCommand(0x01);
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,4,"Door is");
    1cd0:	23 e0       	ldi	r18, 0x03	; 3
    1cd2:	31 e0       	ldi	r19, 0x01	; 1
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	64 e0       	ldi	r22, 0x04	; 4
    1cd8:	a9 01       	movw	r20, r18
    1cda:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Unlocking  ");
    1cde:	2b e0       	ldi	r18, 0x0B	; 11
    1ce0:	31 e0       	ldi	r19, 0x01	; 1
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	64 e0       	ldi	r22, 0x04	; 4
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	/* Delay from Timer1 , count seconds*/
	myOwnDelay(15);
    1cec:	8f e0       	ldi	r24, 0x0F	; 15
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <myOwnDelay>
	LCD_sendCommand(0x01);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,4,"Waiting ");
    1cfa:	27 e1       	ldi	r18, 0x17	; 23
    1cfc:	31 e0       	ldi	r19, 0x01	; 1
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	64 e0       	ldi	r22, 0x04	; 4
    1d02:	a9 01       	movw	r20, r18
    1d04:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	/* Delay from Timer1 , count seconds*/
	myOwnDelay(3);
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <myOwnDelay>
	LCD_sendCommand(0x01);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,4,"Door is");
    1d16:	23 e0       	ldi	r18, 0x03	; 3
    1d18:	31 e0       	ldi	r19, 0x01	; 1
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	a9 01       	movw	r20, r18
    1d20:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,4,"Locking  ");
    1d24:	20 e2       	ldi	r18, 0x20	; 32
    1d26:	31 e0       	ldi	r19, 0x01	; 1
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	64 e0       	ldi	r22, 0x04	; 4
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayStringRowColumn>
	/* Delay from Timer1 , count seconds*/
	myOwnDelay(15);
    1d32:	8f e0       	ldi	r24, 0x0F	; 15
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <myOwnDelay>
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <timerTicks>:
/*
 * Function Name : timerTicks()
 * Description: Just increment num. of ticks in timer 1s
 */
void timerTicks(void)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1d48:	80 91 43 01 	lds	r24, 0x0143
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 43 01 	sts	0x0143, r24
}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <myOwnDelay>:
/*
 * Function Name : myOwnDelay()
 * Description   : initialize timer1 and count until to sec which is input from user
 */
void myOwnDelay(uint16 sec)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	2d 97       	sbiw	r28, 0x0d	; 13
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	8f 83       	std	Y+7, r24	; 0x07
	g_tick=0;
    1d70:	10 92 43 01 	sts	0x0143, r1
	 * 1.Initial value
	 * 2.compare value(in ctc mode)
	 * 3.prescaler
	 * 4.mode of operation
	 ***********************************************/
	Timer1_ConfigType Timer1_Confige = { 0 ,0 , N_64 , Normal};
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	9a 87       	std	Y+10, r25	; 0x0a
    1d7a:	89 87       	std	Y+9, r24	; 0x09
    1d7c:	e9 e3       	ldi	r30, 0x39	; 57
    1d7e:	f1 e0       	ldi	r31, 0x01	; 1
    1d80:	fc 87       	std	Y+12, r31	; 0x0c
    1d82:	eb 87       	std	Y+11, r30	; 0x0b
    1d84:	f6 e0       	ldi	r31, 0x06	; 6
    1d86:	fd 87       	std	Y+13, r31	; 0x0d
    1d88:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d8c:	00 80       	ld	r0, Z
    1d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	9c 87       	std	Y+12, r25	; 0x0c
    1d96:	8b 87       	std	Y+11, r24	; 0x0b
    1d98:	e9 85       	ldd	r30, Y+9	; 0x09
    1d9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d9c:	00 82       	st	Z, r0
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	9a 87       	std	Y+10, r25	; 0x0a
    1da6:	89 87       	std	Y+9, r24	; 0x09
    1da8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1daa:	91 50       	subi	r25, 0x01	; 1
    1dac:	9d 87       	std	Y+13, r25	; 0x0d
    1dae:	ed 85       	ldd	r30, Y+13	; 0x0d
    1db0:	ee 23       	and	r30, r30
    1db2:	51 f7       	brne	.-44     	; 0x1d88 <myOwnDelay+0x30>
	Timer1_init(&Timer1_Confige);
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 89 14 	call	0x2912	; 0x2912 <Timer1_init>
	/* Used call back which call in ISR for time1*/
	Timer1_setCallBack(timerTicks);
    1dbc:	80 ea       	ldi	r24, 0xA0	; 160
    1dbe:	9e e0       	ldi	r25, 0x0E	; 14
    1dc0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <Timer1_setCallBack>
	/* Delay*/
	while(g_tick < (2*sec));
    1dc4:	80 91 43 01 	lds	r24, 0x0143
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dce:	98 85       	ldd	r25, Y+8	; 0x08
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	28 17       	cp	r18, r24
    1dd6:	39 07       	cpc	r19, r25
    1dd8:	a8 f3       	brcs	.-22     	; 0x1dc4 <myOwnDelay+0x6c>
	/* Deinitialization of timer1*/
	Timer1_deInit();
    1dda:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <Timer1_deInit>

}
    1dde:	2d 96       	adiw	r28, 0x0d	; 13
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <LCD_init>:
 * Function Name: LCD_init()
 * Description:
 * 	Initialization for LCD Driver
 */
void LCD_init(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
	/* Make both Rs and E  output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e1e:	b1 e4       	ldi	r27, 0x41	; 65
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a9 87       	std	Y+9, r26	; 0x09
    1e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <LCD_init+0x7a>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <LCD_init+0xda>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD_init+0xc8>
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <LCD_init+0xbc>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_init+0x104>
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
#ifndef LCD_FOUR_BIT_MODE
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,OUTPUT_PORT);
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	6f ef       	ldi	r22, 0xFF	; 255
    1f00:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f04:	88 e3       	ldi	r24, 0x38	; 56
    1f06:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f0a:	8c e0       	ldi	r24, 0x0C	; 12
    1f0c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>



}
    1f16:	2e 96       	adiw	r28, 0x0e	; 14
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_sendCommand>:
 * Function Name: LCD_sendCommand()
 * Description:
 * 	Send a Command To LCD Through Data Path accroding to Data Sheet
 */
void LCD_sendCommand(uint8 command)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	e9 97       	sbiw	r28, 0x39	; 57
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	89 af       	std	Y+57, r24	; 0x39
	/* Make RS=*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID ,LOGIC_LOW);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e8       	ldi	r26, 0x80	; 128
    1f4e:	bf e3       	ldi	r27, 0x3F	; 63
    1f50:	8d ab       	std	Y+53, r24	; 0x35
    1f52:	9e ab       	std	Y+54, r25	; 0x36
    1f54:	af ab       	std	Y+55, r26	; 0x37
    1f56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	89 ab       	std	Y+49, r24	; 0x31
    1f72:	9a ab       	std	Y+50, r25	; 0x32
    1f74:	ab ab       	std	Y+51, r26	; 0x33
    1f76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f78:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_sendCommand+0x72>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_sendCommand+0xd2>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9e a7       	std	Y+46, r25	; 0x2e
    1fe2:	8d a7       	std	Y+45, r24	; 0x2d
    1fe4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_sendCommand+0xc0>
    1fec:	9e a7       	std	Y+46, r25	; 0x2e
    1fee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	98 ab       	std	Y+48, r25	; 0x30
    1ff8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_sendCommand+0xb4>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	69 a9       	ldd	r22, Y+49	; 0x31
    2006:	7a a9       	ldd	r23, Y+50	; 0x32
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	9c a7       	std	Y+44, r25	; 0x2c
    201e:	8b a7       	std	Y+43, r24	; 0x2b
    2020:	8b a5       	ldd	r24, Y+43	; 0x2b
    2022:	9c a5       	ldd	r25, Y+44	; 0x2c
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_sendCommand+0xfc>
    2028:	9c a7       	std	Y+44, r25	; 0x2c
    202a:	8b a7       	std	Y+43, r24	; 0x2b
	/* From AC Characteristic of LCD tas must delay by 50 nSec*/
	_delay_ms(1);
	/*Make Enable=1*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_HIGH);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e8       	ldi	r26, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	8f a3       	std	Y+39, r24	; 0x27
    2040:	98 a7       	std	Y+40, r25	; 0x28
    2042:	a9 a7       	std	Y+41, r26	; 0x29
    2044:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6f a1       	ldd	r22, Y+39	; 0x27
    2048:	78 a5       	ldd	r23, Y+40	; 0x28
    204a:	89 a5       	ldd	r24, Y+41	; 0x29
    204c:	9a a5       	ldd	r25, Y+42	; 0x2a
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a ef       	ldi	r20, 0xFA	; 250
    2054:	54 e4       	ldi	r21, 0x44	; 68
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8b a3       	std	Y+35, r24	; 0x23
    2060:	9c a3       	std	Y+36, r25	; 0x24
    2062:	ad a3       	std	Y+37, r26	; 0x25
    2064:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2066:	6b a1       	ldd	r22, Y+35	; 0x23
    2068:	7c a1       	ldd	r23, Y+36	; 0x24
    206a:	8d a1       	ldd	r24, Y+37	; 0x25
    206c:	9e a1       	ldd	r25, Y+38	; 0x26
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <LCD_sendCommand+0x160>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9a a3       	std	Y+34, r25	; 0x22
    2084:	89 a3       	std	Y+33, r24	; 0x21
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2088:	6b a1       	ldd	r22, Y+35	; 0x23
    208a:	7c a1       	ldd	r23, Y+36	; 0x24
    208c:	8d a1       	ldd	r24, Y+37	; 0x25
    208e:	9e a1       	ldd	r25, Y+38	; 0x26
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6f a1       	ldd	r22, Y+39	; 0x27
    20a2:	78 a5       	ldd	r23, Y+40	; 0x28
    20a4:	89 a5       	ldd	r24, Y+41	; 0x29
    20a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <LCD_sendCommand+0x1c0>
    20ca:	88 ec       	ldi	r24, 0xC8	; 200
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	98 a3       	std	Y+32, r25	; 0x20
    20d0:	8f 8f       	std	Y+31, r24	; 0x1f
    20d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d4:	98 a1       	ldd	r25, Y+32	; 0x20
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_sendCommand+0x1ae>
    20da:	98 a3       	std	Y+32, r25	; 0x20
    20dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	89 a1       	ldd	r24, Y+33	; 0x21
    20e0:	9a a1       	ldd	r25, Y+34	; 0x22
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9a a3       	std	Y+34, r25	; 0x22
    20e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ea:	9a a1       	ldd	r25, Y+34	; 0x22
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <LCD_sendCommand+0x1a2>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9a a3       	std	Y+34, r25	; 0x22
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	8d 8f       	std	Y+29, r24	; 0x1d
    210e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2110:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_sendCommand+0x1ea>
    2116:	9e 8f       	std	Y+30, r25	; 0x1e
    2118:	8d 8f       	std	Y+29, r24	; 0x1d
	/* From AC Characteristic of LCD  must delay (tpw-tdsw) by 190 nSec*/
	_delay_ms(1);
	/* Send Command*/
#ifndef LCD_FOUR_BIT_MODE
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	69 ad       	ldd	r22, Y+57	; 0x39
    211e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	89 8f       	std	Y+25, r24	; 0x19
    212c:	9a 8f       	std	Y+26, r25	; 0x1a
    212e:	ab 8f       	std	Y+27, r26	; 0x1b
    2130:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	69 8d       	ldd	r22, Y+25	; 0x19
    2134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8d 8b       	std	Y+21, r24	; 0x15
    214c:	9e 8b       	std	Y+22, r25	; 0x16
    214e:	af 8b       	std	Y+23, r26	; 0x17
    2150:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2152:	6d 89       	ldd	r22, Y+21	; 0x15
    2154:	7e 89       	ldd	r23, Y+22	; 0x16
    2156:	8f 89       	ldd	r24, Y+23	; 0x17
    2158:	98 8d       	ldd	r25, Y+24	; 0x18
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <LCD_sendCommand+0x24c>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2174:	6d 89       	ldd	r22, Y+21	; 0x15
    2176:	7e 89       	ldd	r23, Y+22	; 0x16
    2178:	8f 89       	ldd	r24, Y+23	; 0x17
    217a:	98 8d       	ldd	r25, Y+24	; 0x18
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	69 8d       	ldd	r22, Y+25	; 0x19
    218e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_sendCommand+0x2ac>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9a 8b       	std	Y+18, r25	; 0x12
    21bc:	89 8b       	std	Y+17, r24	; 0x11
    21be:	89 89       	ldd	r24, Y+17	; 0x11
    21c0:	9a 89       	ldd	r25, Y+18	; 0x12
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_sendCommand+0x29a>
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8b 89       	ldd	r24, Y+19	; 0x13
    21d6:	9c 89       	ldd	r25, Y+20	; 0x14
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <LCD_sendCommand+0x28e>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6d 89       	ldd	r22, Y+21	; 0x15
    21e0:	7e 89       	ldd	r23, Y+22	; 0x16
    21e2:	8f 89       	ldd	r24, Y+23	; 0x17
    21e4:	98 8d       	ldd	r25, Y+24	; 0x18
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	98 8b       	std	Y+16, r25	; 0x10
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	98 89       	ldd	r25, Y+16	; 0x10
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_sendCommand+0x2d6>
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
	/* From AC Characteristic of LCD  must delay tdsw by 100 nSec*/
	_delay_ms(1);
	/* Return E=0*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_LOW);
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	8b 87       	std	Y+11, r24	; 0x0b
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	ad 87       	std	Y+13, r26	; 0x0d
    221e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a ef       	ldi	r20, 0xFA	; 250
    222e:	54 e4       	ldi	r21, 0x44	; 68
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_sendCommand+0x39a>
    22a4:	88 ec       	ldi	r24, 0xC8	; 200
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendCommand+0x388>
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_sendCommand+0x37c>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_sendCommand+0x3c4>
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    22f4:	e9 96       	adiw	r28, 0x39	; 57
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <LCD_displayCharacter>:
 * Function Name: LCD_displayCharacter()
 * Description:
 * 	Display a Character  To LCD Through Data Path accroding to Data Sheet
 */
void LCD_displayCharacter(uint8 data)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	e9 97       	sbiw	r28, 0x39	; 57
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	89 af       	std	Y+57, r24	; 0x39
	/* Make RS=1*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID ,LOGIC_HIGH);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a0 e8       	ldi	r26, 0x80	; 128
    232c:	bf e3       	ldi	r27, 0x3F	; 63
    232e:	8d ab       	std	Y+53, r24	; 0x35
    2330:	9e ab       	std	Y+54, r25	; 0x36
    2332:	af ab       	std	Y+55, r26	; 0x37
    2334:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2336:	6d a9       	ldd	r22, Y+53	; 0x35
    2338:	7e a9       	ldd	r23, Y+54	; 0x36
    233a:	8f a9       	ldd	r24, Y+55	; 0x37
    233c:	98 ad       	ldd	r25, Y+56	; 0x38
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a ef       	ldi	r20, 0xFA	; 250
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	89 ab       	std	Y+49, r24	; 0x31
    2350:	9a ab       	std	Y+50, r25	; 0x32
    2352:	ab ab       	std	Y+51, r26	; 0x33
    2354:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2356:	69 a9       	ldd	r22, Y+49	; 0x31
    2358:	7a a9       	ldd	r23, Y+50	; 0x32
    235a:	8b a9       	ldd	r24, Y+51	; 0x33
    235c:	9c a9       	ldd	r25, Y+52	; 0x34
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e8       	ldi	r20, 0x80	; 128
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236a:	88 23       	and	r24, r24
    236c:	2c f4       	brge	.+10     	; 0x2378 <LCD_displayCharacter+0x72>
		__ticks = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	8f a7       	std	Y+47, r24	; 0x2f
    2376:	3f c0       	rjmp	.+126    	; 0x23f6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2378:	69 a9       	ldd	r22, Y+49	; 0x31
    237a:	7a a9       	ldd	r23, Y+50	; 0x32
    237c:	8b a9       	ldd	r24, Y+51	; 0x33
    237e:	9c a9       	ldd	r25, Y+52	; 0x34
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	3f ef       	ldi	r19, 0xFF	; 255
    2384:	4f e7       	ldi	r20, 0x7F	; 127
    2386:	57 e4       	ldi	r21, 0x47	; 71
    2388:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238c:	18 16       	cp	r1, r24
    238e:	4c f5       	brge	.+82     	; 0x23e2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2390:	6d a9       	ldd	r22, Y+53	; 0x35
    2392:	7e a9       	ldd	r23, Y+54	; 0x36
    2394:	8f a9       	ldd	r24, Y+55	; 0x37
    2396:	98 ad       	ldd	r25, Y+56	; 0x38
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	98 ab       	std	Y+48, r25	; 0x30
    23b6:	8f a7       	std	Y+47, r24	; 0x2f
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <LCD_displayCharacter+0xd2>
    23ba:	88 ec       	ldi	r24, 0xC8	; 200
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e a7       	std	Y+46, r25	; 0x2e
    23c0:	8d a7       	std	Y+45, r24	; 0x2d
    23c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_displayCharacter+0xc0>
    23ca:	9e a7       	std	Y+46, r25	; 0x2e
    23cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d0:	98 a9       	ldd	r25, Y+48	; 0x30
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	98 ab       	std	Y+48, r25	; 0x30
    23d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23da:	98 a9       	ldd	r25, Y+48	; 0x30
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	69 f7       	brne	.-38     	; 0x23ba <LCD_displayCharacter+0xb4>
    23e0:	14 c0       	rjmp	.+40     	; 0x240a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	69 a9       	ldd	r22, Y+49	; 0x31
    23e4:	7a a9       	ldd	r23, Y+50	; 0x32
    23e6:	8b a9       	ldd	r24, Y+51	; 0x33
    23e8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	98 ab       	std	Y+48, r25	; 0x30
    23f4:	8f a7       	std	Y+47, r24	; 0x2f
    23f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f8:	98 a9       	ldd	r25, Y+48	; 0x30
    23fa:	9c a7       	std	Y+44, r25	; 0x2c
    23fc:	8b a7       	std	Y+43, r24	; 0x2b
    23fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2400:	9c a5       	ldd	r25, Y+44	; 0x2c
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_displayCharacter+0xfc>
    2406:	9c a7       	std	Y+44, r25	; 0x2c
    2408:	8b a7       	std	Y+43, r24	; 0x2b
	/* From AC Characteristic of LCD tas must delay by 50 nSec*/
	_delay_ms(1);
	/*Make Enable=1*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_HIGH);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	61 e0       	ldi	r22, 0x01	; 1
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e8       	ldi	r26, 0x80	; 128
    241a:	bf e3       	ldi	r27, 0x3F	; 63
    241c:	8f a3       	std	Y+39, r24	; 0x27
    241e:	98 a7       	std	Y+40, r25	; 0x28
    2420:	a9 a7       	std	Y+41, r26	; 0x29
    2422:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6f a1       	ldd	r22, Y+39	; 0x27
    2426:	78 a5       	ldd	r23, Y+40	; 0x28
    2428:	89 a5       	ldd	r24, Y+41	; 0x29
    242a:	9a a5       	ldd	r25, Y+42	; 0x2a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8b a3       	std	Y+35, r24	; 0x23
    243e:	9c a3       	std	Y+36, r25	; 0x24
    2440:	ad a3       	std	Y+37, r26	; 0x25
    2442:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <LCD_displayCharacter+0x160>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6f a1       	ldd	r22, Y+39	; 0x27
    2480:	78 a5       	ldd	r23, Y+40	; 0x28
    2482:	89 a5       	ldd	r24, Y+41	; 0x29
    2484:	9a a5       	ldd	r25, Y+42	; 0x2a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9a a3       	std	Y+34, r25	; 0x22
    24a4:	89 a3       	std	Y+33, r24	; 0x21
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_displayCharacter+0x1c0>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	98 a3       	std	Y+32, r25	; 0x20
    24ae:	8f 8f       	std	Y+31, r24	; 0x1f
    24b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24b2:	98 a1       	ldd	r25, Y+32	; 0x20
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_displayCharacter+0x1ae>
    24b8:	98 a3       	std	Y+32, r25	; 0x20
    24ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	89 a1       	ldd	r24, Y+33	; 0x21
    24be:	9a a1       	ldd	r25, Y+34	; 0x22
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9a a3       	std	Y+34, r25	; 0x22
    24c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	89 a1       	ldd	r24, Y+33	; 0x21
    24c8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <LCD_displayCharacter+0x1a2>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6b a1       	ldd	r22, Y+35	; 0x23
    24d2:	7c a1       	ldd	r23, Y+36	; 0x24
    24d4:	8d a1       	ldd	r24, Y+37	; 0x25
    24d6:	9e a1       	ldd	r25, Y+38	; 0x26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9a a3       	std	Y+34, r25	; 0x22
    24e2:	89 a3       	std	Y+33, r24	; 0x21
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	9e 8f       	std	Y+30, r25	; 0x1e
    24ea:	8d 8f       	std	Y+29, r24	; 0x1d
    24ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_displayCharacter+0x1ea>
    24f4:	9e 8f       	std	Y+30, r25	; 0x1e
    24f6:	8d 8f       	std	Y+29, r24	; 0x1d
	/* From AC Characteristic of LCD  must delay (tpw-tdsw) by 190 nSec*/
	_delay_ms(1);
	/* Send Command*/
#ifndef LCD_FOUR_BIT_MODE
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	69 ad       	ldd	r22, Y+57	; 0x39
    24fc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e8       	ldi	r26, 0x80	; 128
    2506:	bf e3       	ldi	r27, 0x3F	; 63
    2508:	89 8f       	std	Y+25, r24	; 0x19
    250a:	9a 8f       	std	Y+26, r25	; 0x1a
    250c:	ab 8f       	std	Y+27, r26	; 0x1b
    250e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	69 8d       	ldd	r22, Y+25	; 0x19
    2512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8d 8b       	std	Y+21, r24	; 0x15
    252a:	9e 8b       	std	Y+22, r25	; 0x16
    252c:	af 8b       	std	Y+23, r26	; 0x17
    252e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	69 8d       	ldd	r22, Y+25	; 0x19
    256c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9c 8b       	std	Y+20, r25	; 0x14
    2590:	8b 8b       	std	Y+19, r24	; 0x13
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <LCD_displayCharacter+0x2ac>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9a 8b       	std	Y+18, r25	; 0x12
    259a:	89 8b       	std	Y+17, r24	; 0x11
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_displayCharacter+0x29a>
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <LCD_displayCharacter+0x28e>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6d 89       	ldd	r22, Y+21	; 0x15
    25be:	7e 89       	ldd	r23, Y+22	; 0x16
    25c0:	8f 89       	ldd	r24, Y+23	; 0x17
    25c2:	98 8d       	ldd	r25, Y+24	; 0x18
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	98 8b       	std	Y+16, r25	; 0x10
    25d6:	8f 87       	std	Y+15, r24	; 0x0f
    25d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25da:	98 89       	ldd	r25, Y+16	; 0x10
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_displayCharacter+0x2d6>
    25e0:	98 8b       	std	Y+16, r25	; 0x10
    25e2:	8f 87       	std	Y+15, r24	; 0x0f
	/* From AC Characteristic of LCD  must delay tdsw by 100 nSec*/
	_delay_ms(1);
	/* Return E=0*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_LOW);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 e8       	ldi	r26, 0x80	; 128
    25f4:	bf e3       	ldi	r27, 0x3F	; 63
    25f6:	8b 87       	std	Y+11, r24	; 0x0b
    25f8:	9c 87       	std	Y+12, r25	; 0x0c
    25fa:	ad 87       	std	Y+13, r26	; 0x0d
    25fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2600:	7c 85       	ldd	r23, Y+12	; 0x0c
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a ef       	ldi	r20, 0xFA	; 250
    260c:	54 e4       	ldi	r21, 0x44	; 68
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8f 83       	std	Y+7, r24	; 0x07
    2618:	98 87       	std	Y+8, r25	; 0x08
    261a:	a9 87       	std	Y+9, r26	; 0x09
    261c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	3f c0       	rjmp	.+126    	; 0x26be <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	6b 85       	ldd	r22, Y+11	; 0x0b
    265a:	7c 85       	ldd	r23, Y+12	; 0x0c
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <LCD_displayCharacter+0x39a>
    2682:	88 ec       	ldi	r24, 0xC8	; 200
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c 83       	std	Y+4, r25	; 0x04
    2688:	8b 83       	std	Y+3, r24	; 0x03
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_displayCharacter+0x388>
    2692:	9c 83       	std	Y+4, r25	; 0x04
    2694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <LCD_displayCharacter+0x37c>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_displayCharacter+0x3c4>
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

}
    26d2:	e9 96       	adiw	r28, 0x39	; 57
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_displayString>:
 * Function Name: LCD_displayString()
 * Description:
 * 	Display a String on LCD
 */
void LCD_displayString(const char*str)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <LCD_displayString+0x6>
    26ea:	0f 92       	push	r0
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9b 83       	std	Y+3, r25	; 0x03
    26f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    26f4:	19 82       	std	Y+1, r1	; 0x01
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayCharacter(str[i]);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	0e 94 83 11 	call	0x2306	; 0x2306 <LCD_displayCharacter>
		i++;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
 * 	Display a String on LCD
 */
void LCD_displayString(const char*str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	88 23       	and	r24, r24
    2728:	39 f7       	brne	.-50     	; 0x26f8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <LCD_moveCursor>:
 * Function Name: LCD_moveCursor()
 * Description:
 * 	Move Cursor to the specific location accroding to row and col
 */
void LCD_moveCursor(uint8 row ,uint8 col)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <LCD_moveCursor+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <LCD_moveCursor+0x8>
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	3d 83       	std	Y+5, r19	; 0x05
    2750:	2c 83       	std	Y+4, r18	; 0x04
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	9d 81       	ldd	r25, Y+5	; 0x05
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	91 05       	cpc	r25, r1
    275a:	c1 f0       	breq	.+48     	; 0x278c <LCD_moveCursor+0x56>
    275c:	2c 81       	ldd	r18, Y+4	; 0x04
    275e:	3d 81       	ldd	r19, Y+5	; 0x05
    2760:	22 30       	cpi	r18, 0x02	; 2
    2762:	31 05       	cpc	r19, r1
    2764:	2c f4       	brge	.+10     	; 0x2770 <LCD_moveCursor+0x3a>
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	9d 81       	ldd	r25, Y+5	; 0x05
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	61 f0       	breq	.+24     	; 0x2786 <LCD_moveCursor+0x50>
    276e:	19 c0       	rjmp	.+50     	; 0x27a2 <LCD_moveCursor+0x6c>
    2770:	2c 81       	ldd	r18, Y+4	; 0x04
    2772:	3d 81       	ldd	r19, Y+5	; 0x05
    2774:	22 30       	cpi	r18, 0x02	; 2
    2776:	31 05       	cpc	r19, r1
    2778:	69 f0       	breq	.+26     	; 0x2794 <LCD_moveCursor+0x5e>
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	83 30       	cpi	r24, 0x03	; 3
    2780:	91 05       	cpc	r25, r1
    2782:	61 f0       	breq	.+24     	; 0x279c <LCD_moveCursor+0x66>
    2784:	0e c0       	rjmp	.+28     	; 0x27a2 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	0b c0       	rjmp	.+22     	; 0x27a2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	80 5c       	subi	r24, 0xC0	; 192
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	07 c0       	rjmp	.+14     	; 0x27a2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	80 5f       	subi	r24, 0xF0	; 240
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	80 5b       	subi	r24, 0xB0	; 176
    27a0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	80 68       	ori	r24, 0x80	; 128
    27a6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>

}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <LCD_displayStringRowColumn>:
 * Function Name: LCD_displayStringRowColumn()
 * Description :
 * 		Display a String At any Position in LCD
 */
void LCD_displayStringRowColumn(uint8 row ,uint8 col,const char*str)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <LCD_displayStringRowColumn+0x6>
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <LCD_displayStringRowColumn+0x8>
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	6a 83       	std	Y+2, r22	; 0x02
    27ca:	5c 83       	std	Y+4, r21	; 0x04
    27cc:	4b 83       	std	Y+3, r20	; 0x03
	/* go to required position*/
	LCD_moveCursor(row,col);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	6a 81       	ldd	r22, Y+2	; 0x02
    27d2:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_moveCursor>
	/*display*/
	LCD_displayString(str);
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_displayString>
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <LCD_integerToString>:
 * Function Name: LCD_integerToString()
 * Description:
 * 		Convert interger to String and Display it
 */
void LCD_integerToString(int data)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	62 97       	sbiw	r28, 0x12	; 18
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
	/*Make Array of Character to store ascii of num and size=16,because this Max num can show*/
	char buffer[16];
	/*Using C-Built in-function , 10 is the Base of Number*/
	itoa(data,buffer,10); /* buffer[0]=ASCII for first digit of integer num and So on*/
    2804:	89 89       	ldd	r24, Y+17	; 0x11
    2806:	9a 89       	ldd	r25, Y+18	; 0x12
    2808:	9e 01       	movw	r18, r28
    280a:	2f 5f       	subi	r18, 0xFF	; 255
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	b9 01       	movw	r22, r18
    2810:	4a e0       	ldi	r20, 0x0A	; 10
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <itoa>
	LCD_displayString(buffer);
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_displayString>
}
    2820:	62 96       	adiw	r28, 0x12	; 18
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_clearScreen>:
/* Function Name: LCD_clearScreen
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_sendCommand>
}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <__vector_7>:

/***********************************************************
 * 				Interrupt Service Routine for Compare Mode
 ************************************************************/
ISR(TIMER1_COMPA_vect)
{
    2846:	1f 92       	push	r1
    2848:	0f 92       	push	r0
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	0f 92       	push	r0
    284e:	11 24       	eor	r1, r1
    2850:	2f 93       	push	r18
    2852:	3f 93       	push	r19
    2854:	4f 93       	push	r20
    2856:	5f 93       	push	r21
    2858:	6f 93       	push	r22
    285a:	7f 93       	push	r23
    285c:	8f 93       	push	r24
    285e:	9f 93       	push	r25
    2860:	af 93       	push	r26
    2862:	bf 93       	push	r27
    2864:	ef 93       	push	r30
    2866:	ff 93       	push	r31
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_Ptr)
    2870:	80 91 44 01 	lds	r24, 0x0144
    2874:	90 91 45 01 	lds	r25, 0x0145
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	29 f0       	breq	.+10     	; 0x2886 <__vector_7+0x40>
	{
		g_ptr(); /* Call Back for function which i want to use it in ISR by pointer to function*/
    287c:	e0 91 44 01 	lds	r30, 0x0144
    2880:	f0 91 45 01 	lds	r31, 0x0145
    2884:	09 95       	icall
	}
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	ff 91       	pop	r31
    288c:	ef 91       	pop	r30
    288e:	bf 91       	pop	r27
    2890:	af 91       	pop	r26
    2892:	9f 91       	pop	r25
    2894:	8f 91       	pop	r24
    2896:	7f 91       	pop	r23
    2898:	6f 91       	pop	r22
    289a:	5f 91       	pop	r21
    289c:	4f 91       	pop	r20
    289e:	3f 91       	pop	r19
    28a0:	2f 91       	pop	r18
    28a2:	0f 90       	pop	r0
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	0f 90       	pop	r0
    28a8:	1f 90       	pop	r1
    28aa:	18 95       	reti

000028ac <__vector_9>:
/***********************************************************
 * 				Interrupt Service Routine for Normal Mode
 ************************************************************/
ISR(TIMER1_OVF_vect)
{
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	2f 93       	push	r18
    28b8:	3f 93       	push	r19
    28ba:	4f 93       	push	r20
    28bc:	5f 93       	push	r21
    28be:	6f 93       	push	r22
    28c0:	7f 93       	push	r23
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	ef 93       	push	r30
    28cc:	ff 93       	push	r31
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_Ptr)
    28d6:	80 91 44 01 	lds	r24, 0x0144
    28da:	90 91 45 01 	lds	r25, 0x0145
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	29 f0       	breq	.+10     	; 0x28ec <__vector_9+0x40>
	{
		g_ptr(); /* Call Back for function which i want to use it in ISR by pointer to function*/
    28e2:	e0 91 44 01 	lds	r30, 0x0144
    28e6:	f0 91 45 01 	lds	r31, 0x0145
    28ea:	09 95       	icall
	}
}
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	ff 91       	pop	r31
    28f2:	ef 91       	pop	r30
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

00002912 <Timer1_init>:
/*
 * Function Name: Timer1_init
 *	Description: Initialize Timer1 and select mode and prescaler
 */
void Timer1_init(const Timer1_ConfigType *Config_ptr)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <Timer1_init+0x6>
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
	/*Initial value of Timer1*/
	TCNT1= Config_ptr->initial_value;
    2920:	ac e4       	ldi	r26, 0x4C	; 76
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	9c 93       	st	X, r25
    2930:	8e 93       	st	-X, r24
	TCCR1B= (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    2932:	ae e4       	ldi	r26, 0x4E	; 78
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	ee e4       	ldi	r30, 0x4E	; 78
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	98 2f       	mov	r25, r24
    293e:	98 7f       	andi	r25, 0xF8	; 248
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	fa 81       	ldd	r31, Y+2	; 0x02
    2944:	84 81       	ldd	r24, Z+4	; 0x04
    2946:	89 2b       	or	r24, r25
    2948:	8c 93       	st	X, r24

	if(Config_ptr->mode == Normal)
    294a:	e9 81       	ldd	r30, Y+1	; 0x01
    294c:	fa 81       	ldd	r31, Y+2	; 0x02
    294e:	85 81       	ldd	r24, Z+5	; 0x05
    2950:	88 23       	and	r24, r24
    2952:	79 f4       	brne	.+30     	; 0x2972 <Timer1_init+0x60>
	{
		TCCR1A|= (1<<FOC1A) | (1<<FOC1B);
    2954:	af e4       	ldi	r26, 0x4F	; 79
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	ef e4       	ldi	r30, 0x4F	; 79
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8c 60       	ori	r24, 0x0C	; 12
    2960:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);
    2962:	a9 e5       	ldi	r26, 0x59	; 89
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e9 e5       	ldi	r30, 0x59	; 89
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	84 60       	ori	r24, 0x04	; 4
    296e:	8c 93       	st	X, r24
    2970:	3e c0       	rjmp	.+124    	; 0x29ee <Timer1_init+0xdc>

	}
	else if(Config_ptr->mode == CTC_OCR1 )
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	85 81       	ldd	r24, Z+5	; 0x05
    2978:	84 30       	cpi	r24, 0x04	; 4
    297a:	e1 f4       	brne	.+56     	; 0x29b4 <Timer1_init+0xa2>
	{
		TCCR1A= (1<<FOC1A) | (1<<FOC1B);
    297c:	ef e4       	ldi	r30, 0x4F	; 79
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	8c e0       	ldi	r24, 0x0C	; 12
    2982:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
    2984:	ae e4       	ldi	r26, 0x4E	; 78
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	ee e4       	ldi	r30, 0x4E	; 78
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	88 60       	ori	r24, 0x08	; 8
    2990:	8c 93       	st	X, r24
		OCR1A= Config_ptr->compare_value;
    2992:	aa e4       	ldi	r26, 0x4A	; 74
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	11 96       	adiw	r26, 0x01	; 1
    29a0:	9c 93       	st	X, r25
    29a2:	8e 93       	st	-X, r24
		TIMSK |= (1<< OCIE1A);
    29a4:	a9 e5       	ldi	r26, 0x59	; 89
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e9 e5       	ldi	r30, 0x59	; 89
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	80 61       	ori	r24, 0x10	; 16
    29b0:	8c 93       	st	X, r24
    29b2:	1d c0       	rjmp	.+58     	; 0x29ee <Timer1_init+0xdc>
	}
	else if(Config_ptr->mode == CTC_ICR1)
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	85 81       	ldd	r24, Z+5	; 0x05
    29ba:	8c 30       	cpi	r24, 0x0C	; 12
    29bc:	c1 f4       	brne	.+48     	; 0x29ee <Timer1_init+0xdc>
	{
		TCCR1A= (1<<FOC1A) | (1<<FOC1B);
    29be:	ef e4       	ldi	r30, 0x4F	; 79
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8c e0       	ldi	r24, 0x0C	; 12
    29c4:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (1<<WGM13);
    29c6:	ee e4       	ldi	r30, 0x4E	; 78
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	88 e1       	ldi	r24, 0x18	; 24
    29cc:	80 83       	st	Z, r24
		ICR1= Config_ptr->compare_value;
    29ce:	a6 e4       	ldi	r26, 0x46	; 70
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
		TIMSK |= (1<< OCIE1A);
    29e0:	a9 e5       	ldi	r26, 0x59	; 89
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e9 e5       	ldi	r30, 0x59	; 89
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	80 61       	ori	r24, 0x10	; 16
    29ec:	8c 93       	st	X, r24
	}
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <Timer1_setCallBack>:
/*
 * Function Name: Timer1_setCallBack
 * Description: Call The function that i will implement it in ISR by save it's address in  global pointer to function
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <Timer1_setCallBack+0x6>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	90 93 45 01 	sts	0x0145, r25
    2a0e:	80 93 44 01 	sts	0x0144, r24
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <Timer1_deInit>:
/*
 * Function Name: Timer1_deIinit
 * Description: de-activation Timer1
 */
void Timer1_deInit(void)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2a24:	ec e4       	ldi	r30, 0x4C	; 76
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	11 82       	std	Z+1, r1	; 0x01
    2a2a:	10 82       	st	Z, r1
	TCCR1A=0;
    2a2c:	ef e4       	ldi	r30, 0x4F	; 79
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	10 82       	st	Z, r1
	TCCR1B=0;
    2a32:	ee e4       	ldi	r30, 0x4E	; 78
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	10 82       	st	Z, r1
	OCR1A=0;
    2a38:	ea e4       	ldi	r30, 0x4A	; 74
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	11 82       	std	Z+1, r1	; 0x01
    2a3e:	10 82       	st	Z, r1
	TIMSK=0;
    2a40:	e9 e5       	ldi	r30, 0x59	; 89
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	10 82       	st	Z, r1

}
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <UART_init>:
/*
 * Function Name : UART_init()
 * Description   : initialization uart driver
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <UART_init+0x6>
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <UART_init+0x8>
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baudRate_value=0;
    2a5c:	1a 82       	std	Y+2, r1	; 0x02
    2a5e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA |=(1<<U2X);				/*Double Transmission Speed*/
    2a60:	ab e2       	ldi	r26, 0x2B	; 43
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	eb e2       	ldi	r30, 0x2B	; 43
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	82 60       	ori	r24, 0x02	; 2
    2a6c:	8c 93       	st	X, r24
	UCSRB= (1<<RXEN) | (1<<TXEN);	/* Enable Reciever and transmitter*/
    2a6e:	ea e2       	ldi	r30, 0x2A	; 42
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	88 e1       	ldi	r24, 0x18	; 24
    2a74:	80 83       	st	Z, r24
	/*For 9-bit Mode*/
	if(Config_ptr->bitData==Bit_9)
    2a76:	eb 81       	ldd	r30, Y+3	; 0x03
    2a78:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	87 30       	cpi	r24, 0x07	; 7
    2a7e:	39 f4       	brne	.+14     	; 0x2a8e <UART_init+0x42>
	{
		UCSRB |= (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);	/* specific for 9 bit data in AVR family*/
    2a80:	aa e2       	ldi	r26, 0x2A	; 42
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	ea e2       	ldi	r30, 0x2A	; 42
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	87 60       	ori	r24, 0x07	; 7
    2a8c:	8c 93       	st	X, r24
	}
	UCSRC |= (1<<URSEL);			/* To write in UCSRC register*/
    2a8e:	a0 e4       	ldi	r26, 0x40	; 64
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e0 e4       	ldi	r30, 0x40	; 64
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	80 68       	ori	r24, 0x80	; 128
    2a9a:	8c 93       	st	X, r24
	/* insert parity bit choice*/
	UCSRC =(UCSRC & 0xC1) | ((Config_ptr->parity) << 4) ;
    2a9c:	a0 e4       	ldi	r26, 0x40	; 64
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e0 e4       	ldi	r30, 0x40	; 64
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	21 7c       	andi	r18, 0xC1	; 193
    2aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2aac:	fc 81       	ldd	r31, Y+4	; 0x04
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	82 95       	swap	r24
    2ab6:	92 95       	swap	r25
    2ab8:	90 7f       	andi	r25, 0xF0	; 240
    2aba:	98 27       	eor	r25, r24
    2abc:	80 7f       	andi	r24, 0xF0	; 240
    2abe:	98 27       	eor	r25, r24
    2ac0:	82 2b       	or	r24, r18
    2ac2:	8c 93       	st	X, r24
	/* Choose stop bit*/
	if(Config_ptr->stopBit ==OneBit)
    2ac4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac8:	81 81       	ldd	r24, Z+1	; 0x01
    2aca:	88 23       	and	r24, r24
    2acc:	41 f4       	brne	.+16     	; 0x2ade <UART_init+0x92>
	{
		UCSRC &=~(1<<USBS);
    2ace:	a0 e4       	ldi	r26, 0x40	; 64
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e0 e4       	ldi	r30, 0x40	; 64
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 7f       	andi	r24, 0xF7	; 247
    2ada:	8c 93       	st	X, r24
    2adc:	0c c0       	rjmp	.+24     	; 0x2af6 <UART_init+0xaa>
	}
	else if(Config_ptr->stopBit ==TwoBit)
    2ade:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae2:	81 81       	ldd	r24, Z+1	; 0x01
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	39 f4       	brne	.+14     	; 0x2af6 <UART_init+0xaa>
	{
		UCSRC |= (1<<USBS);
    2ae8:	a0 e4       	ldi	r26, 0x40	; 64
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e0 e4       	ldi	r30, 0x40	; 64
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	88 60       	ori	r24, 0x08	; 8
    2af4:	8c 93       	st	X, r24
	}
	/*configurate data bits*/
	UCSRC |=(GET_BIT(Config_ptr->bitData , 0)<<1) | (GET_BIT(Config_ptr->bitData,1)<<2);
    2af6:	a0 e4       	ldi	r26, 0x40	; 64
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e0 e4       	ldi	r30, 0x40	; 64
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	38 2f       	mov	r19, r24
    2b02:	eb 81       	ldd	r30, Y+3	; 0x03
    2b04:	fc 81       	ldd	r31, Y+4	; 0x04
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	81 70       	andi	r24, 0x01	; 1
    2b0e:	90 70       	andi	r25, 0x00	; 0
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	28 2f       	mov	r18, r24
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	82 70       	andi	r24, 0x02	; 2
    2b22:	90 70       	andi	r25, 0x00	; 0
    2b24:	95 95       	asr	r25
    2b26:	87 95       	ror	r24
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	82 2b       	or	r24, r18
    2b32:	83 2b       	or	r24, r19
    2b34:	8c 93       	st	X, r24

	baudRate_value= ((uint32)F_CPU/(8*Config_ptr->baudRate)) -1 ;	/*Equation to calculate BaudRate in Double speed Mode*/
    2b36:	eb 81       	ldd	r30, Y+3	; 0x03
    2b38:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3a:	83 81       	ldd	r24, Z+3	; 0x03
    2b3c:	94 81       	ldd	r25, Z+4	; 0x04
    2b3e:	a5 81       	ldd	r26, Z+5	; 0x05
    2b40:	b6 81       	ldd	r27, Z+6	; 0x06
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	aa 1f       	adc	r26, r26
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	aa 1f       	adc	r26, r26
    2b50:	bb 1f       	adc	r27, r27
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	aa 1f       	adc	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	9c 01       	movw	r18, r24
    2b5c:	ad 01       	movw	r20, r26
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	92 e1       	ldi	r25, 0x12	; 18
    2b62:	aa e7       	ldi	r26, 0x7A	; 122
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 03 18 	call	0x3006	; 0x3006 <__udivmodsi4>
    2b6e:	da 01       	movw	r26, r20
    2b70:	c9 01       	movw	r24, r18
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
	/* LSB 8 bits*/
	UBRRL=(uint8)baudRate_value;
    2b78:	e9 e2       	ldi	r30, 0x29	; 41
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	80 83       	st	Z, r24
	/* MSB 8 bits*/
	UBRRH = (UBRRH & 0x70) | (baudRate_value>>8);
    2b80:	a0 e4       	ldi	r26, 0x40	; 64
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e0 e4       	ldi	r30, 0x40	; 64
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	20 77       	andi	r18, 0x70	; 112
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	89 2f       	mov	r24, r25
    2b94:	99 27       	eor	r25, r25
    2b96:	82 2b       	or	r24, r18
    2b98:	8c 93       	st	X, r24
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <UART_recieveByte>:
/*
 * Function Name: UART_recieveByte()
 * Description  : recieve byte from another uart , read UDR
 */
uint8 UART_recieveByte(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	/* wait until Clear reciever flag, refering to no data in recieve buffer*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2bb0:	eb e2       	ldi	r30, 0x2B	; 43
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	dc f7       	brge	.-10     	; 0x2bb0 <UART_recieveByte+0x8>
	/* Read byte from UDR*/
	return UDR;
    2bba:	ec e2       	ldi	r30, 0x2C	; 44
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_sendByte>:
/*
 * Function Name :UART_sendByte()
 * Description   : take data and send it to another uart driver
 */
void UART_sendByte(uint8 data)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	/* wait until Clear data register flag, refering to no data in transmitter buffer*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2bd2:	eb e2       	ldi	r30, 0x2B	; 43
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	80 72       	andi	r24, 0x20	; 32
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	b9 f3       	breq	.-18     	; 0x2bd2 <UART_sendByte+0xc>
	/* passing data to UDR register to read it */
	UDR=data;
    2be4:	ec e2       	ldi	r30, 0x2C	; 44
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24
}
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <UART_sendString>:
/*
 * Function Name : UART_sendString()
 * Description   : Send a string using UART
 */
void UART_sendString(const uint8* Str)		/* Const, because it makes no any changes in string , just send it*/
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <UART_sendString+0x6>
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9b 83       	std	Y+3, r25	; 0x03
    2c02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	0e c0       	rjmp	.+28     	; 0x2c24 <UART_sendString+0x30>
	/* send until null character*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	fc 01       	movw	r30, r24
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
    2c18:	80 81       	ld	r24, Z
    2c1a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_sendByte>
		i++;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	8f 5f       	subi	r24, 0xFF	; 255
    2c22:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8* Str)		/* Const, because it makes no any changes in string , just send it*/
{
	uint8 i=0;
	/* send until null character*/
	while(Str[i] != '\0')
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	fc 01       	movw	r30, r24
    2c30:	e2 0f       	add	r30, r18
    2c32:	f3 1f       	adc	r31, r19
    2c34:	80 81       	ld	r24, Z
    2c36:	88 23       	and	r24, r24
    2c38:	39 f7       	brne	.-50     	; 0x2c08 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <UART_recieveString>:
/*
 * Function Name :UART_recieveString()
 * Description   : recieve string from uart , with agreement by a specific character
 */
void UART_recieveString(uint8 *Str)
{
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <UART_recieveString+0xa>
    2c50:	0f 92       	push	r0
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	9b 83       	std	Y+3, r25	; 0x03
    2c58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2c5a:	19 82       	std	Y+1, r1	; 0x01
	/* get first byte*/
	Str[i]=UART_recieveByte();
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	8c 01       	movw	r16, r24
    2c68:	02 0f       	add	r16, r18
    2c6a:	13 1f       	adc	r17, r19
    2c6c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_recieveByte>
    2c70:	f8 01       	movw	r30, r16
    2c72:	80 83       	st	Z, r24
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <UART_recieveString+0x4e>
	/* choose a specific character '#'*/
	while(Str[i] != '#')
	{
		i++;
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	89 83       	std	Y+1, r24	; 0x01
		Str[i]=UART_recieveByte();
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	8c 01       	movw	r16, r24
    2c88:	02 0f       	add	r16, r18
    2c8a:	13 1f       	adc	r17, r19
    2c8c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_recieveByte>
    2c90:	f8 01       	movw	r30, r16
    2c92:	80 83       	st	Z, r24
{
	uint8 i=0;
	/* get first byte*/
	Str[i]=UART_recieveByte();
	/* choose a specific character '#'*/
	while(Str[i] != '#')
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	80 81       	ld	r24, Z
    2ca6:	83 32       	cpi	r24, 0x23	; 35
    2ca8:	31 f7       	brne	.-52     	; 0x2c76 <UART_recieveString+0x30>
	{
		i++;
		Str[i]=UART_recieveByte();
	}
	/* insert null character to string */
	Str[i]='\0';
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	10 82       	st	Z, r1
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	08 95       	ret

00002ccc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	60 97       	sbiw	r28, 0x10	; 16
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, INPUT_PIN);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	64 e0       	ldi	r22, 0x04	; 4
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, INPUT_PIN);
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	65 e0       	ldi	r22, 0x05	; 5
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, INPUT_PIN);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	66 e0       	ldi	r22, 0x06	; 6
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, INPUT_PIN);
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	67 e0       	ldi	r22, 0x07	; 7
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, INPUT_PIN);
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, INPUT_PIN);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, INPUT_PIN);
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	62 e0       	ldi	r22, 0x02	; 2
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, INPUT_PIN);
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2d30:	1f 86       	std	Y+15, r1	; 0x0f
    2d32:	b1 c0       	rjmp	.+354    	; 0x2e96 <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT_PIN);
    2d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d36:	98 2f       	mov	r25, r24
    2d38:	9c 5f       	subi	r25, 0xFC	; 252
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	69 2f       	mov	r22, r25
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d46:	98 2f       	mov	r25, r24
    2d48:	9c 5f       	subi	r25, 0xFC	; 252
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	69 2f       	mov	r22, r25
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2d54:	18 8a       	std	Y+16, r1	; 0x10
    2d56:	1f c0       	rjmp	.+62     	; 0x2d96 <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	68 89       	ldd	r22, Y+16	; 0x10
    2d5c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2d60:	88 23       	and	r24, r24
    2d62:	b1 f4       	brne	.+44     	; 0x2d90 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	98 2f       	mov	r25, r24
    2d74:	88 89       	ldd	r24, Y+16	; 0x10
    2d76:	89 0f       	add	r24, r25
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT_PIN);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2d7e:	60 96       	adiw	r28, 0x10	; 16
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,OUTPUT_PIN);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2d90:	88 89       	ldd	r24, Y+16	; 0x10
    2d92:	8f 5f       	subi	r24, 0xFF	; 255
    2d94:	88 8b       	std	Y+16, r24	; 0x10
    2d96:	88 89       	ldd	r24, Y+16	; 0x10
    2d98:	84 30       	cpi	r24, 0x04	; 4
    2d9a:	f0 f2       	brcs	.-68     	; 0x2d58 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,INPUT_PIN);
    2d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9e:	98 2f       	mov	r25, r24
    2da0:	9c 5f       	subi	r25, 0xFC	; 252
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	69 2f       	mov	r22, r25
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a0 ea       	ldi	r26, 0xA0	; 160
    2db2:	b0 e4       	ldi	r27, 0x40	; 64
    2db4:	8b 87       	std	Y+11, r24	; 0x0b
    2db6:	9c 87       	std	Y+12, r25	; 0x0c
    2db8:	ad 87       	std	Y+13, r26	; 0x0d
    2dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	4a ef       	ldi	r20, 0xFA	; 250
    2dca:	54 e4       	ldi	r21, 0x44	; 68
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	8f 83       	std	Y+7, r24	; 0x07
    2dd6:	98 87       	std	Y+8, r25	; 0x08
    2dd8:	a9 87       	std	Y+9, r26	; 0x09
    2dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dde:	78 85       	ldd	r23, Y+8	; 0x08
    2de0:	89 85       	ldd	r24, Y+9	; 0x09
    2de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	2c f4       	brge	.+10     	; 0x2dfe <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	3f c0       	rjmp	.+126    	; 0x2e7c <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    2dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2e00:	78 85       	ldd	r23, Y+8	; 0x08
    2e02:	89 85       	ldd	r24, Y+9	; 0x09
    2e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	3f ef       	ldi	r19, 0xFF	; 255
    2e0a:	4f e7       	ldi	r20, 0x7F	; 127
    2e0c:	57 e4       	ldi	r21, 0x47	; 71
    2e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e12:	18 16       	cp	r1, r24
    2e14:	4c f5       	brge	.+82     	; 0x2e68 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <KEYPAD_getPressedKey+0x192>
    2e40:	88 ec       	ldi	r24, 0xC8	; 200
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9c 83       	std	Y+4, r25	; 0x04
    2e46:	8b 83       	std	Y+3, r24	; 0x03
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <KEYPAD_getPressedKey+0x180>
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	9e 81       	ldd	r25, Y+6	; 0x06
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	69 f7       	brne	.-38     	; 0x2e40 <KEYPAD_getPressedKey+0x174>
    2e66:	14 c0       	rjmp	.+40     	; 0x2e90 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e68:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6a:	78 85       	ldd	r23, Y+8	; 0x08
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	9a 81       	ldd	r25, Y+2	; 0x02
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <KEYPAD_getPressedKey+0x1bc>
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, INPUT_PIN);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	8f 87       	std	Y+15, r24	; 0x0f
    2e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	08 f4       	brcc	.+2      	; 0x2e9e <KEYPAD_getPressedKey+0x1d2>
    2e9c:	4b cf       	rjmp	.-362    	; 0x2d34 <KEYPAD_getPressedKey+0x68>
    2e9e:	48 cf       	rjmp	.-368    	; 0x2d30 <KEYPAD_getPressedKey+0x64>

00002ea0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2eae:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	3c 83       	std	Y+4, r19	; 0x04
    2eb8:	2b 83       	std	Y+3, r18	; 0x03
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebe:	88 30       	cpi	r24, 0x08	; 8
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2ec4:	70 c0       	rjmp	.+224    	; 0x2fa6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    2eca:	29 30       	cpi	r18, 0x09	; 9
    2ecc:	31 05       	cpc	r19, r1
    2ece:	5c f5       	brge	.+86     	; 0x2f26 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	84 30       	cpi	r24, 0x04	; 4
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2eda:	59 c0       	rjmp	.+178    	; 0x2f8e <KEYPAD_4x4_adjustKeyNumber+0xee>
    2edc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ede:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee0:	25 30       	cpi	r18, 0x05	; 5
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	9c f4       	brge	.+38     	; 0x2f0c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	91 05       	cpc	r25, r1
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2ef0:	48 c0       	rjmp	.+144    	; 0x2f82 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef6:	23 30       	cpi	r18, 0x03	; 3
    2ef8:	31 05       	cpc	r19, r1
    2efa:	0c f0       	brlt	.+2      	; 0x2efe <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2efc:	45 c0       	rjmp	.+138    	; 0x2f88 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	91 05       	cpc	r25, r1
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2f08:	39 c0       	rjmp	.+114    	; 0x2f7c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2f0a:	67 c0       	rjmp	.+206    	; 0x2fda <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f10:	26 30       	cpi	r18, 0x06	; 6
    2f12:	31 05       	cpc	r19, r1
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2f16:	41 c0       	rjmp	.+130    	; 0x2f9a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	87 30       	cpi	r24, 0x07	; 7
    2f1e:	91 05       	cpc	r25, r1
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2f22:	3e c0       	rjmp	.+124    	; 0x2fa0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2f24:	37 c0       	rjmp	.+110    	; 0x2f94 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2f26:	2b 81       	ldd	r18, Y+3	; 0x03
    2f28:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2a:	2c 30       	cpi	r18, 0x0C	; 12
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2f30:	46 c0       	rjmp	.+140    	; 0x2fbe <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	8d 30       	cpi	r24, 0x0D	; 13
    2f38:	91 05       	cpc	r25, r1
    2f3a:	5c f4       	brge	.+22     	; 0x2f52 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f40:	2a 30       	cpi	r18, 0x0A	; 10
    2f42:	31 05       	cpc	r19, r1
    2f44:	b1 f1       	breq	.+108    	; 0x2fb2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	8b 30       	cpi	r24, 0x0B	; 11
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	a4 f5       	brge	.+104    	; 0x2fb8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2f50:	2d c0       	rjmp	.+90     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2f52:	2b 81       	ldd	r18, Y+3	; 0x03
    2f54:	3c 81       	ldd	r19, Y+4	; 0x04
    2f56:	2e 30       	cpi	r18, 0x0E	; 14
    2f58:	31 05       	cpc	r19, r1
    2f5a:	b9 f1       	breq	.+110    	; 0x2fca <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	8e 30       	cpi	r24, 0x0E	; 14
    2f62:	91 05       	cpc	r25, r1
    2f64:	7c f1       	brlt	.+94     	; 0x2fc4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f66:	2b 81       	ldd	r18, Y+3	; 0x03
    2f68:	3c 81       	ldd	r19, Y+4	; 0x04
    2f6a:	2f 30       	cpi	r18, 0x0F	; 15
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	79 f1       	breq	.+94     	; 0x2fce <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	80 31       	cpi	r24, 0x10	; 16
    2f76:	91 05       	cpc	r25, r1
    2f78:	69 f1       	breq	.+90     	; 0x2fd4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f7a:	2f c0       	rjmp	.+94     	; 0x2fda <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2f7c:	87 e0       	ldi	r24, 0x07	; 7
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	2e c0       	rjmp	.+92     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2f82:	88 e0       	ldi	r24, 0x08	; 8
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	2b c0       	rjmp	.+86     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2f88:	89 e0       	ldi	r24, 0x09	; 9
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	28 c0       	rjmp	.+80     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2f8e:	85 e2       	ldi	r24, 0x25	; 37
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	25 c0       	rjmp	.+74     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2f94:	84 e0       	ldi	r24, 0x04	; 4
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	22 c0       	rjmp	.+68     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2f9a:	85 e0       	ldi	r24, 0x05	; 5
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	1f c0       	rjmp	.+62     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2fa0:	86 e0       	ldi	r24, 0x06	; 6
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	1c c0       	rjmp	.+56     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2fa6:	8a e2       	ldi	r24, 0x2A	; 42
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	19 c0       	rjmp	.+50     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	16 c0       	rjmp	.+44     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	13 c0       	rjmp	.+38     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2fb8:	83 e0       	ldi	r24, 0x03	; 3
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	10 c0       	rjmp	.+32     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2fbe:	8d e2       	ldi	r24, 0x2D	; 45
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	0d c0       	rjmp	.+26     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = ' ';  /* ASCII of Enter */
    2fc4:	80 e2       	ldi	r24, 0x20	; 32
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	0a c0       	rjmp	.+20     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	08 c0       	rjmp	.+16     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2fce:	8d e3       	ldi	r24, 0x3D	; 61
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	05 c0       	rjmp	.+10     	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2fd4:	8b e2       	ldi	r24, 0x2B	; 43
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <__udivmodqi4>:
    2fee:	99 1b       	sub	r25, r25
    2ff0:	79 e0       	ldi	r23, 0x09	; 9
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <__udivmodqi4_ep>

00002ff4 <__udivmodqi4_loop>:
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	96 17       	cp	r25, r22
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <__udivmodqi4_ep>
    2ffa:	96 1b       	sub	r25, r22

00002ffc <__udivmodqi4_ep>:
    2ffc:	88 1f       	adc	r24, r24
    2ffe:	7a 95       	dec	r23
    3000:	c9 f7       	brne	.-14     	; 0x2ff4 <__udivmodqi4_loop>
    3002:	80 95       	com	r24
    3004:	08 95       	ret

00003006 <__udivmodsi4>:
    3006:	a1 e2       	ldi	r26, 0x21	; 33
    3008:	1a 2e       	mov	r1, r26
    300a:	aa 1b       	sub	r26, r26
    300c:	bb 1b       	sub	r27, r27
    300e:	fd 01       	movw	r30, r26
    3010:	0d c0       	rjmp	.+26     	; 0x302c <__udivmodsi4_ep>

00003012 <__udivmodsi4_loop>:
    3012:	aa 1f       	adc	r26, r26
    3014:	bb 1f       	adc	r27, r27
    3016:	ee 1f       	adc	r30, r30
    3018:	ff 1f       	adc	r31, r31
    301a:	a2 17       	cp	r26, r18
    301c:	b3 07       	cpc	r27, r19
    301e:	e4 07       	cpc	r30, r20
    3020:	f5 07       	cpc	r31, r21
    3022:	20 f0       	brcs	.+8      	; 0x302c <__udivmodsi4_ep>
    3024:	a2 1b       	sub	r26, r18
    3026:	b3 0b       	sbc	r27, r19
    3028:	e4 0b       	sbc	r30, r20
    302a:	f5 0b       	sbc	r31, r21

0000302c <__udivmodsi4_ep>:
    302c:	66 1f       	adc	r22, r22
    302e:	77 1f       	adc	r23, r23
    3030:	88 1f       	adc	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	1a 94       	dec	r1
    3036:	69 f7       	brne	.-38     	; 0x3012 <__udivmodsi4_loop>
    3038:	60 95       	com	r22
    303a:	70 95       	com	r23
    303c:	80 95       	com	r24
    303e:	90 95       	com	r25
    3040:	9b 01       	movw	r18, r22
    3042:	ac 01       	movw	r20, r24
    3044:	bd 01       	movw	r22, r26
    3046:	cf 01       	movw	r24, r30
    3048:	08 95       	ret

0000304a <__prologue_saves__>:
    304a:	2f 92       	push	r2
    304c:	3f 92       	push	r3
    304e:	4f 92       	push	r4
    3050:	5f 92       	push	r5
    3052:	6f 92       	push	r6
    3054:	7f 92       	push	r7
    3056:	8f 92       	push	r8
    3058:	9f 92       	push	r9
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	ca 1b       	sub	r28, r26
    3074:	db 0b       	sbc	r29, r27
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	09 94       	ijmp

00003082 <__epilogue_restores__>:
    3082:	2a 88       	ldd	r2, Y+18	; 0x12
    3084:	39 88       	ldd	r3, Y+17	; 0x11
    3086:	48 88       	ldd	r4, Y+16	; 0x10
    3088:	5f 84       	ldd	r5, Y+15	; 0x0f
    308a:	6e 84       	ldd	r6, Y+14	; 0x0e
    308c:	7d 84       	ldd	r7, Y+13	; 0x0d
    308e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3090:	9b 84       	ldd	r9, Y+11	; 0x0b
    3092:	aa 84       	ldd	r10, Y+10	; 0x0a
    3094:	b9 84       	ldd	r11, Y+9	; 0x09
    3096:	c8 84       	ldd	r12, Y+8	; 0x08
    3098:	df 80       	ldd	r13, Y+7	; 0x07
    309a:	ee 80       	ldd	r14, Y+6	; 0x06
    309c:	fd 80       	ldd	r15, Y+5	; 0x05
    309e:	0c 81       	ldd	r16, Y+4	; 0x04
    30a0:	1b 81       	ldd	r17, Y+3	; 0x03
    30a2:	aa 81       	ldd	r26, Y+2	; 0x02
    30a4:	b9 81       	ldd	r27, Y+1	; 0x01
    30a6:	ce 0f       	add	r28, r30
    30a8:	d1 1d       	adc	r29, r1
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	ed 01       	movw	r28, r26
    30b6:	08 95       	ret

000030b8 <itoa>:
    30b8:	fb 01       	movw	r30, r22
    30ba:	9f 01       	movw	r18, r30
    30bc:	e8 94       	clt
    30be:	42 30       	cpi	r20, 0x02	; 2
    30c0:	c4 f0       	brlt	.+48     	; 0x30f2 <itoa+0x3a>
    30c2:	45 32       	cpi	r20, 0x25	; 37
    30c4:	b4 f4       	brge	.+44     	; 0x30f2 <itoa+0x3a>
    30c6:	4a 30       	cpi	r20, 0x0A	; 10
    30c8:	29 f4       	brne	.+10     	; 0x30d4 <itoa+0x1c>
    30ca:	97 fb       	bst	r25, 7
    30cc:	1e f4       	brtc	.+6      	; 0x30d4 <itoa+0x1c>
    30ce:	90 95       	com	r25
    30d0:	81 95       	neg	r24
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	64 2f       	mov	r22, r20
    30d6:	77 27       	eor	r23, r23
    30d8:	0e 94 8d 18 	call	0x311a	; 0x311a <__udivmodhi4>
    30dc:	80 5d       	subi	r24, 0xD0	; 208
    30de:	8a 33       	cpi	r24, 0x3A	; 58
    30e0:	0c f0       	brlt	.+2      	; 0x30e4 <itoa+0x2c>
    30e2:	89 5d       	subi	r24, 0xD9	; 217
    30e4:	81 93       	st	Z+, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	a1 f7       	brne	.-24     	; 0x30d4 <itoa+0x1c>
    30ec:	16 f4       	brtc	.+4      	; 0x30f2 <itoa+0x3a>
    30ee:	5d e2       	ldi	r21, 0x2D	; 45
    30f0:	51 93       	st	Z+, r21
    30f2:	10 82       	st	Z, r1
    30f4:	c9 01       	movw	r24, r18
    30f6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <strrev>

000030fa <strrev>:
    30fa:	dc 01       	movw	r26, r24
    30fc:	fc 01       	movw	r30, r24
    30fe:	67 2f       	mov	r22, r23
    3100:	71 91       	ld	r23, Z+
    3102:	77 23       	and	r23, r23
    3104:	e1 f7       	brne	.-8      	; 0x30fe <strrev+0x4>
    3106:	32 97       	sbiw	r30, 0x02	; 2
    3108:	04 c0       	rjmp	.+8      	; 0x3112 <strrev+0x18>
    310a:	7c 91       	ld	r23, X
    310c:	6d 93       	st	X+, r22
    310e:	70 83       	st	Z, r23
    3110:	62 91       	ld	r22, -Z
    3112:	ae 17       	cp	r26, r30
    3114:	bf 07       	cpc	r27, r31
    3116:	c8 f3       	brcs	.-14     	; 0x310a <strrev+0x10>
    3118:	08 95       	ret

0000311a <__udivmodhi4>:
    311a:	aa 1b       	sub	r26, r26
    311c:	bb 1b       	sub	r27, r27
    311e:	51 e1       	ldi	r21, 0x11	; 17
    3120:	07 c0       	rjmp	.+14     	; 0x3130 <__udivmodhi4_ep>

00003122 <__udivmodhi4_loop>:
    3122:	aa 1f       	adc	r26, r26
    3124:	bb 1f       	adc	r27, r27
    3126:	a6 17       	cp	r26, r22
    3128:	b7 07       	cpc	r27, r23
    312a:	10 f0       	brcs	.+4      	; 0x3130 <__udivmodhi4_ep>
    312c:	a6 1b       	sub	r26, r22
    312e:	b7 0b       	sbc	r27, r23

00003130 <__udivmodhi4_ep>:
    3130:	88 1f       	adc	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	5a 95       	dec	r21
    3136:	a9 f7       	brne	.-22     	; 0x3122 <__udivmodhi4_loop>
    3138:	80 95       	com	r24
    313a:	90 95       	com	r25
    313c:	bc 01       	movw	r22, r24
    313e:	cd 01       	movw	r24, r26
    3140:	08 95       	ret

00003142 <_exit>:
    3142:	f8 94       	cli

00003144 <__stop_program>:
    3144:	ff cf       	rjmp	.-2      	; 0x3144 <__stop_program>
